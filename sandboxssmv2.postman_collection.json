{
	"info": {
		"_postman_id": "5e0e0c27-de7a-4761-a540-967791405097",
		"name": "SSMv2 - Sandbox",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Nissan",
			"item": [
				{
					"name": "Authorisation API",
					"item": [
						{
							"name": "Authorise Nissan dealer user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc40e067-941c-4dad-96f7-43d4dc750951",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Access Token has been generated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");",
											"});",
											"",
											"//set Nissan account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let NISS_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"NISS_token\", NISS_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISS_username}}&password={{NISS_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISS_username}}"
										},
										{
											"key": "password",
											"value": "{{NISS_password}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "This method primarily is used to create an \"Access Token\", which can be used to make authorized calls to any other Superservice API.To make an authorized call to the Superservice API, you will need to include the Access Token in the \"Authorization\" header (or cookie)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b4aa9dd5-e3a4-4a8c-9375-eb102f5b7ed9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f83699-8670-46be-8ba2-c96d75c28438",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Datapak API",
					"item": [
						{
							"name": "Operation Services",
							"item": [
								{
									"name": "Check Technical price (S30KMNE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "483fdd00-8f0f-4968-863b-7b80870cbe80",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test total technical price of operation 56677/S30KMNE\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(259.09);",
													"});  ",
													"",
													" //check discount for labour rate",
													"pm.test(\"Test Author discount rule\", function () {",
													"   ",
													"    pm.expect(jsonData.operations[0].labour.pricing.adjustmentPercentage).to.eql(15);",
													"});    ",
													"",
													"    //check labour time adjustment through operation authoring, standardTime 1.2",
													"pm.test(\"Test Author operation authoring rule - adjust labour time\", function () {",
													"    pm.expect(jsonData.operations[0].labour.times[1].code).to.eql(\"adjustedStandardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[1].quantity).to.eql(1.5);",
													"});",
													"",
													"/*",
													"    //check LTA, standardTime 1.2, the case is Operation Authoring ajusted the labour time to 1.5 and LTA also ajusted by 0.1",
													"pm.test(\"Test Author LTA\", function () {",
													"    pm.expect(jsonData.operations[0].labour.times[3].code).to.eql(\"adjustedIndustryStandardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[3].quantity).to.eql(1.6);",
													"});",
													"*/",
													"",
													"pm.test(\"Test Author substitution rule - default select alternate part when available\", function () {",
													"    pm.expect(jsonData.operations[0].parts[1].number).to.eql(\"A520800Q1DVA\");",
													"});",
													"",
													"pm.test(\"Validate that this operation has Upsell Recommendations\", function () {",
													"    pm.expect(jsonData.operations[0].hasRecommendations).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6430ed93-95a5-4b19-b22c-d5782c92e314",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S30KMNE&vin=SJNFAAJ11U1000347&categoryId=2844&sectionId=KA&pricingMode=Technical&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S30KMNE"
												},
												{
													"key": "vin",
													"value": "SJNFAAJ11U1000347"
												},
												{
													"key": "categoryId",
													"value": "2844"
												},
												{
													"key": "sectionId",
													"value": "KA"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check LTA  (S30KMNE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "483fdd00-8f0f-4968-863b-7b80870cbe80",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test total technical price of operation 56677/S30KMNE\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(337.58);",
													"});  ",
													"",
													"",
													"",
													"    //check LTA, standardTime 1.8, LTA ajusted by 0.2",
													"pm.test(\"Test Author LTA\", function () {",
													"    pm.expect(jsonData.operations[0].labour.times[1].code).to.eql(\"industryStandardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[1].quantity).to.eql(2);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6430ed93-95a5-4b19-b22c-d5782c92e314",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S30KMNE&modelId=56856&categoryId=2844&sectionId=KA&pricingMode=Technical&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S30KMNE"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "categoryId",
													"value": "2844"
												},
												{
													"key": "sectionId",
													"value": "KA"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check OE Commercial price (S30KMNE)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "385ce117-3a4b-4705-bc51-a0f13b66dbc9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe808250-6dec-496b-b6fb-3b676d6508e9",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// test total price of operation",
													"pm.test(\"test total OE commercial price of operation 56677/S30KMNE\", function () {",
													"    var jsonData = pm.response.json();",
													"    //pm.expect(jsonData.isoCurrencyCode).to.eql(\"EUR\");",
													"    //pm.expect(jsonData.operations[0].totals.total).to.eql(198.38);",
													" ",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(256);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S30KMNE&vin=SJNFAAJ11U1000347&pricingMode=OE&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S30KMNE"
												},
												{
													"key": "vin",
													"value": "SJNFAAJ11U1000347"
												},
												{
													"key": "pricingMode",
													"value": "OE"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Alternate Commercial price (S30KMNE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f9f048-edfb-4daa-99d9-94fe3b2e978d",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// test total price of operation",
													"pm.test(\"test total alternate commercial price of operation 56677/S30KMNE\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(260);",
													"    //Check it is alternate part",
													"    pm.expect(jsonData.operations[0].parts[1].references.isAlternatePartFromServer).to.eql(\"true\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a25a9770-97a9-4c8a-ae82-3091164044ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S30KMNE&vin=SJNFAAJ11U1000347&pricingMode=Alternate&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S30KMNE"
												},
												{
													"key": "vin",
													"value": "SJNFAAJ11U1000347"
												},
												{
													"key": "pricingMode",
													"value": "Alternate"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Invoice Lines for Operation with Conditional Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d828ce9-499b-4486-99a2-7d2d2697a884",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test conditional notes",
													"pm.test(\"Test conditional notes are present in the invoice lines of operation\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].invoiceLines[2].notes[0].type).to.eql(\"conditional\");",
													"    pm.expect(jsonData.operations[0].invoiceLines[5].notes[0].type).to.eql(\"conditional\");",
													"    ",
													"});",
													"",
													"pm.test(\"Validate that this operation has Conditional Note Recommendations\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].hasRecommendations).to.eql(true);",
													"    ",
													"});    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S12MONE&modelId=67980&vin=JN1JCNT32U0100104&pricingMode=Auto&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S12MONE"
												},
												{
													"key": "modelId",
													"value": "67980"
												},
												{
													"key": "vin",
													"value": "JN1JCNT32U0100104"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Confirm that conditional notes operation has the correct invoice lines present"
									},
									"response": []
								},
								{
									"name": "Check Recommendations for Operation with Conditional Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6df12ea2-9b32-4621-a1c9-1368c9404328",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test conditional notes",
													"pm.test(\"Test that Conditional Recommendation is present from this call\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].code).to.eql(\"SNMD\");",
													"    pm.expect(jsonData.operations[0].variantDescription).to.eql(\"OPT: MAPU2017 - Map Update 2017, OPT: NC3 - NissanConnect (3)\");",
													"    pm.expect(jsonData.operations[0].recommendationType).to.eql(\"CONDITIONAL\");",
													"    ",
													"});",
													"",
													"// Edit and add the following case when SSM-497 is resolved",
													"",
													"//pm.test(\"Test that Conditional Recommendation is present from this call\", function () {",
													"    ",
													"//    pm.expect(jsonData.operations[0].code).to.eql(\"SNMD\");",
													"//    pm.expect(jsonData.operations[0].variantDescription).to.eql(\"OPT: NC3 - NissanConnect (3), OPT: MAPU2017 - Map Update 2017\");",
													"//    pm.expect(jsonData.operations[0].recommendationType).to.eql(\"UPSELL\");",
													"    ",
													"//});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getRecommendations?modelId=67980&id=10856848&pricingMode=Technical&market=NL&subscriptionAssignment={{NISS_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getRecommendations"
											],
											"query": [
												{
													"key": "modelId",
													"value": "67980"
												},
												{
													"key": "id",
													"value": "10856848"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{NISS_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check recommendations for operation with conditional notes"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Utility Services",
							"item": [
								{
									"name": "listLocales",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fb571c7-bc95-4e1e-bfff-196a223fdd1c",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct number of locales are returned\", function () {",
													"    ",
													"    pm.expect(jsonData.locales.length).to.eql(35);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/utility/listLocales",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"utility",
												"listLocales"
											]
										}
									},
									"response": []
								},
								{
									"name": "listSubscriptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5830b1e6-5bf8-445f-ae0b-132102294ffa",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm Menus subscription is returned\", function () {",
													"    ",
													"    pm.expect(jsonData.subscriptions[0].name).to.eql(\"Nissan Europe - Superservice Menus\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/utility/listSubscriptions",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"utility",
												"listSubscriptions"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Model Services",
							"item": [
								{
									"name": "model/get/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ba4a56a-e4f5-4c5d-9861-53fac7d65c84",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct vehicle is returned\", function () {",
													"    pm.expect(jsonData.text).to.eql(\"Z34 370Z 2DR Coupe 40Th Anniversary 3.7L V6 7sp Automatic\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/get?modelId=56856&vin=JN1GAAZ34U0301394&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "vin",
													"value": "JN1GAAZ34U0301394"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "model/list/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a3df01a-88df-4e2d-8d02-0bc8982b9c8a",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct vehicle attributes return\", function () {",
													"    pm.expect(jsonData.models[0].attributes[3].value).to.eql(\"K13 Micra Tekna 5DR Hatchback 1.2L 3Cyl 5sp Manual\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/list?modelCode=FDWULVGK13EG5&engineCode=HR12DE&transmissionCode=5MT&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"list"
											],
											"query": [
												{
													"key": "modelCode",
													"value": "FDWULVGK13EG5"
												},
												{
													"key": "engineCode",
													"value": "HR12DE"
												},
												{
													"key": "transmissionCode",
													"value": "5MT"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "model/listFamilies/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67891e87-1171-447a-a0fa-9ef2c96c23c0",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct number of families are returned\", function () {",
													"    ",
													"    pm.expect(jsonData.families.length).to.eql(104);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/listFamilies?market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"listFamilies"
											],
											"query": [
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "model/listSeries/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ea1eb69-8ad6-4325-ad79-d82d5ecd9202",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct number of model Series are returned\", function () {",
													"    pm.expect(jsonData.series.length).to.eql(10);",
													"});",
													"",
													"pm.test(\"Confirm first vehicle series returned is correct\", function () {",
													"    pm.expect(jsonData.series[0].description).to.eql(\"FDWULTGK13VG5 : ACENTA (01/2011 - 04/2013) HATCHBACK 5DR Manual 1.2L 3 Cyl Supercharged 5sp Manual LHD\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/listSeries?familyCode=K13A&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"listSeries"
											],
											"query": [
												{
													"key": "familyCode",
													"value": "K13A"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "model/search/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cafbd3a-a10e-44d0-afb0-db0891326180",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm correct model is returned from search\", function () {",
													"    pm.expect(jsonData.models[0].text).to.eql(\"Z34 370Z 2DR Coupe 40Th Anniversary 3.7L V6 6sp Manual\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/search?term=JN1GAAZ34U0300500&type=vin&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"search"
											],
											"query": [
												{
													"key": "term",
													"value": "JN1GAAZ34U0300500"
												},
												{
													"key": "type",
													"value": "vin"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "model/getRecallCampaigns/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24a70029-a8b7-4789-9e7d-a05b6617f80a",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// var jsonData = pm.response.json();",
													"",
													"// pm.test(\"Confirm Recall message is returned\", function () {",
													"//     pm.expect(jsonData.recallCampaigns[0].description).to.eql(\"IMPORTANT: This vehicle is affected by a Recall or Service Campaign. Please immediately check the current status of the vehicle in e-News.\");",
													"// });",
													"",
													"// Need current Recall VINs before re-activating this test."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/getRecallCampaigns?term=JN1GANR35U0100048&type=vin&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"getRecallCampaigns"
											],
											"query": [
												{
													"key": "term",
													"value": "JN1GANR35U0100048"
												},
												{
													"key": "type",
													"value": "vin"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Menu Price Setting Services",
							"item": [
								{
									"name": "/getLabourRateSettings/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ef661c4-da16-4d49-b58d-0acf25063dc7",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm that both labour rates return\", function () {",
													"    pm.expect(jsonData.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Confirm that first labour rate is correct\", function () {",
													"    pm.expect(jsonData[0].name).to.eql(\"EV\");",
													"});",
													"",
													"pm.test(\"Confirm that second labour rate is correct\", function () {",
													"    pm.expect(jsonData[1].name).to.eql(\"Nissan NL fixed rate\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/menupricesetting/getLabourRateSettings?userLevel=Dealer&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"menupricesetting",
												"getLabourRateSettings"
											],
											"query": [
												{
													"key": "userLevel",
													"value": "Dealer"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/getPartPriceLevels/",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef3a5ba3-ac8a-4542-9a90-0e8364d28a63",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Confirm that both labour rates return\", function () {",
													"    pm.expect(jsonData.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Confirm that both labour rates names return correctly\", function () {",
													"    pm.expect(jsonData[0].name).to.eql(\"Dealer NISS NL\");",
													"    pm.expect(jsonData[1].name).to.eql(\"Verkoopprijs NISS NL\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/menupricesetting/getPartPriceLevels?userLevel=Dealer&market=NL&subscriptionAssignment=DYN0000000004D2131&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"menupricesetting",
												"getPartPriceLevels"
											],
											"query": [
												{
													"key": "userLevel",
													"value": "Dealer"
												},
												{
													"key": "market",
													"value": "NL"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN0000000004D2131"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "This is SSMv2 Datapak APIs used to retrieve operation information",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35dbb4af-2e9e-40ff-906c-6cf69a5b9c29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7db90ce-8c47-4bfb-ba7c-575152a04ff9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Order API",
					"item": [
						{
							"name": "Order API /get - Retrieve quote created in Menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cc4d5a9-061b-4471-af7a-e96010ae2fc1",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the quote ",
											"pm.test(\"test total price of the quote created in SSMv2\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(161.95);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{NISS_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{NISS_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API /list - Search for individual order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1889198e-6755-4356-903f-4a815e8166fe",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test the total price of the order returns correctly in Order API\", function () {",
											"",
											"    pm.expect(jsonData.orders[0].totals.total).to.eql(222);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/list?type=Quotation&customerName=Snake%20Jailbird&vin=SJNBCAP12U0201859&pageNumber=1&pageSize=200",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"list"
									],
									"query": [
										{
											"key": "type",
											"value": "Quotation"
										},
										{
											"key": "customerName",
											"value": "Snake%20Jailbird"
										},
										{
											"key": "vin",
											"value": "SJNBCAP12U0201859"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "200"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#1) /save -  Create technically priced quote through Order API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf200023-a022-44f2-aab7-efd95c073e7e",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Standard)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissTechnical_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissTechnical_quoteID\", nissTechnical_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n    \"customer\": {\r\n        \"id\": \"5aa5c14ee4b022a3bb0de45a\",\r\n        \"taxSetting\": {}\r\n    },\r\n    \"vehicles\": [\r\n        {\r\n            \"id\": \"5aa5c14ee4b022a3bb0de458\",\r\n            \"description\": \"J11 Qashqai Tekna 5DR Wagon 1.5L Turbo Diesel 2WD 4 Cyl 6sp Manual\",\r\n            \"vin\": \"SJNFAAJ11U1000347\",\r\n            \"registration\": \"EW364AK\",\r\n            \"transmissionCode\": \"F6\",\r\n            \"engineCode\": \"K9K\",\r\n            \"bodyType\": \"5DR\",\r\n            \"paintCode\": \"Z11\",\r\n            \"modelCode\": \"FTKALCYJ11TGA\"\r\n        }\r\n    ],\r\n    \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"41583201\",\r\n      \"code\": \"S30KMNE\",\r\n      \"pricingMethod\": {\r\n        \"method\": \"Standard\"\r\n      },\r\n      \"description\": \"S30KMNE: Carry out 30,000 km maintenance.\",\r\n      \"variantDescription\": \"OPT: EURO5 - Euro 5, VIN:°1400110 - VIN Breakpoint\",\r\n      \"variantType\": \"Other\",\r\n      \"groupVariantId\": 41583201,\r\n      \"variants\": [\r\n        {\r\n          \"id\": \"3873091\",\r\n          \"description\": \"Euro 5\",\r\n          \"code\": \"EURO5\",\r\n          \"type\": \"Option\"\r\n        },\r\n        {\r\n          \"id\": \"4258060\",\r\n          \"description\": \"VIN Breakpoint\",\r\n          \"code\": \"°1400110\",\r\n          \"type\": \"VINBreakpoint\"\r\n        },\r\n        {\r\n          \"id\": \"1256303\",\r\n          \"description\": \"Excluding Estonia\",\r\n          \"code\": \"-EE\",\r\n          \"type\": \"Country\"\r\n        },\r\n        {\r\n          \"id\": \"301513\",\r\n          \"description\": \"Excluding Greece\",\r\n          \"code\": \"-GR\",\r\n          \"type\": \"Country\"\r\n        }\r\n      ],\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"Nissan NL fixed rate\",\r\n              \"amount\": 71.76\r\n            }\r\n          ],\r\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n          \"adjustmentPercentage\": 7,\r\n          \"totals\": {\r\n            \"extendedPrice\": 107.64,\r\n            \"adjustment\": 7.53,\r\n            \"totalExTax\": 100.11,\r\n            \"total\": 100.11\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1.2\r\n          },\r\n          {\r\n            \"code\": \"adjustedStandardTime\",\r\n            \"quantity\": 1.5\r\n          }\r\n        ],\r\n        \"timeCode\": \"adjustedStandardTime\"\r\n      },\r\n      \"invoiceLines\": [\r\n        {\r\n          \"id\": \"404503\",\r\n          \"description\": \"Carry out 30,000 km maintenance.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"5401\",\r\n          \"description\": \"Replace engine oil.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"408894\",\r\n          \"description\": \"*  If the oil replacement indicator is displayed, change the engine oil and filter as soon as possible, After replacing the engine oil, reset the display.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"5543\",\r\n          \"description\": \"Replace engine oil & oil filter.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"398831\",\r\n          \"description\": \"Inspect drive belt and pulleys.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"408969\",\r\n          \"description\": \"*  Replace every 150,000 km (90,000 miles) / 60 months.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"2023\",\r\n          \"description\": \"Inspect cooling system.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"395372\",\r\n          \"description\": \"Inspect fuel lines.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"398677\",\r\n          \"description\": \"Inspect computer diagnosis.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"408941\",\r\n          \"description\": \"*  Perform diagnosis for all systems with CONSULT and check for DTC.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"403842\",\r\n          \"description\": \"Inspect headlamp alignment (except for 2nd interval).\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"403767\",\r\n          \"description\": \"Inspect brake and clutch systems and fluid.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"403856\",\r\n          \"description\": \"Inspect manual transmission gear oil (for leaks).\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"395350\",\r\n          \"description\": \"Inspect brake pads, rotors and other brake components.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"403938\",\r\n          \"description\": \"Replace air conditioner filter.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"398672\",\r\n          \"description\": \"Inspect body corrosion.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"408928\",\r\n          \"description\": \"*  Inspect once per year.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"0\",\r\n          \"description\": \"CArwash\",\r\n          \"quantity\": 0.3,\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"1102600Q0H\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"WASHER-DRAIN PL\",\r\n          \"alternatePart\": {\r\n            \"pricing\": {\r\n              \"adjustmentPercentage\": 7,\r\n              \"totals\": {\r\n                \"extendedPrice\": 0,\r\n                \"adjustment\": 0,\r\n                \"totalExTax\": 0,\r\n                \"total\": 0\r\n              }\r\n            }\r\n          },\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 1.06\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 1.06,\r\n              \"adjustment\": 0.07,\r\n              \"totalExTax\": 0.99,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 0.1\r\n                }\r\n              ],\r\n              \"total\": 1.09\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"A520800Q1DVA\",\r\n          \"quantity\": 1,\r\n          \"description\": \"OIL FILTER ASSY\",\r\n          \"alternatePart\": {\r\n            \"number\": \"1520800Q1D\",\r\n            \"quantity\": 1,\r\n            \"quantityUnitOfMeasure\": \"Each\",\r\n            \"description\": \"OIL FILTER ASSY\",\r\n            \"pricing\": {\r\n              \"priceLevels\": [\r\n                {\r\n                  \"code\": \"DLR\",\r\n                  \"amount\": 8.96\r\n                }\r\n              ],\r\n        \"priceLevelCode\": \"DLR\",\r\n              \"taxes\": [\r\n                \"TAX\"\r\n              ],\r\n              \"adjustmentPercentage\": 7,\r\n              \"totals\": {\r\n                \"extendedPrice\": 8.96,\r\n                \"adjustment\": 0.63,\r\n                \"totalExTax\": 8.33,\r\n                \"taxes\": [\r\n                  {\r\n                    \"code\": \"TAX\",\r\n                    \"amount\": 0.83\r\n                  }\r\n                ],\r\n                \"total\": 9.16\r\n              }\r\n            },\r\n            \"references\": {\r\n              \"isPnc\": \"false\"\r\n            }\r\n          },\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 7.53\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 7.53,\r\n              \"adjustment\": 0.53,\r\n              \"totalExTax\": 7,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 0.7\r\n                }\r\n              ],\r\n              \"total\": 7.7\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"isAlternatePartFromServer\": \"true\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"272774BU0A\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"AIR FILTER KIT-\",\r\n          \"alternatePart\": {\r\n            \"pricing\": {\r\n              \"adjustmentPercentage\": 7,\r\n              \"totals\": {\r\n                \"extendedPrice\": 0,\r\n                \"adjustment\": 0,\r\n                \"totalExTax\": 0,\r\n                \"total\": 0\r\n              }\r\n            }\r\n          },\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 17.9\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 17.9,\r\n              \"adjustment\": 1.25,\r\n              \"totalExTax\": 16.65,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 1.67\r\n                }\r\n              ],\r\n              \"total\": 18.32\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\"\r\n          }\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"3511\",\r\n          \"code\": \"OD\",\r\n          \"description\": \"Oil Disposal\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 1.4,\r\n              \"totalExTax\": 18.6,\r\n              \"total\": 18.6\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"3531\",\r\n          \"code\": \"SS\",\r\n          \"description\": \"Shop Supplies\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 1.4,\r\n              \"totalExTax\": 18.6,\r\n              \"total\": 18.6\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"Ke90099933\",\r\n          \"code\": \"Ke90099933\",\r\n          \"description\": \"Engine Oil (ACEA C4)\",\r\n          \"quantity\": 4.55,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 0\r\n              },\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 0\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"DLR\",\r\n            \"adjustmentPercentage\": 7,\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"references\": {\r\n        \"modelId\": \"56677\",\r\n        \"familyCode\": \"J11A\",\r\n        \"operationCodeId\": \"405219\",\r\n        \"variantCountOfOperation\": \"1\",\r\n        \"OperationCustomisationStrategy\": \"1520829271943\",\r\n        \"useAlternatePart\": \"true\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"true\"\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    },\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#1) /get - Retrieve technically priced quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6edc94f6-116c-400b-b84b-65ee956e772a",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the quote ",
											"pm.test(\"test total price of technically priced quote created through Order API\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"   //the total technical price is not consistent with the quote created in Menus because there is a known discount issue when create quote through order API",
											"    pm.expect(jsonData.totals.total).to.eql(189.15);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissTechnical_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissTechnical_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#2) /save - Create commercially priced quote through Order API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c20a024-50f7-4801-9cb9-4bce6587e031",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Fiexed price + amount + taxes)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissCommercial_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissCommercial_quoteID\", nissCommercial_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n    \"customer\": {\r\n        \"id\": \"5aa5c14ee4b022a3bb0de45a\",\r\n        \"taxSetting\": {}\r\n    },\r\n    \"vehicles\": [\r\n        {\r\n            \"id\": \"5aa5c14ee4b022a3bb0de458\",\r\n            \"description\": \"J11 Qashqai Tekna 5DR Wagon 1.5L Turbo Diesel 2WD 4 Cyl 6sp Manual\",\r\n            \"vin\": \"SJNFAAJ11U1000347\",\r\n            \"registration\": \"EW364AK\",\r\n            \"transmissionCode\": \"F6\",\r\n            \"engineCode\": \"K9K\",\r\n            \"bodyType\": \"5DR\",\r\n            \"paintCode\": \"Z11\",\r\n            \"modelCode\": \"FTKALCYJ11TGA\"\r\n        }\r\n    ],\r\n    \"currency\": \"AUD\",\r\n    \"operations\": [\r\n        {\r\n            \"id\": \"41583201\",\r\n            \"code\": \"S30KMNE\",\r\n            \"pricingMethod\": {\r\n                \"method\": \"Fixed\",\r\n                \"amount\": 100,\r\n        \"taxes\": [\r\n              \"TAX\"\r\n              ]\r\n            },\r\n            \"description\": \"S30KMNE: Carry out 30,000 km maintenance.\",\r\n            \"variantDescription\": \"OPT: EURO5 - Euro 5, VIN:°1400110 - VIN Breakpoint\",\r\n            \"variantType\": \"Other\",\r\n            \"groupVariantId\": 41583201,\r\n            \"variants\": [\r\n                {\r\n                    \"id\": \"3873091\",\r\n                    \"description\": \"Euro 5\",\r\n                    \"code\": \"EURO5\",\r\n                    \"type\": \"Option\"\r\n                },\r\n                {\r\n                    \"id\": \"4258060\",\r\n                    \"description\": \"VIN Breakpoint\",\r\n                    \"code\": \"°1400110\",\r\n                    \"type\": \"VINBreakpoint\"\r\n                },\r\n                {\r\n                    \"id\": \"1256303\",\r\n                    \"description\": \"Excluding Estonia\",\r\n                    \"code\": \"-EE\",\r\n                    \"type\": \"Country\"\r\n                },\r\n                {\r\n                    \"id\": \"301513\",\r\n                    \"description\": \"Excluding Greece\",\r\n                    \"code\": \"-GR\",\r\n                    \"type\": \"Country\"\r\n                }\r\n            ],\r\n            \"labour\": {\r\n                \"times\": [\r\n                    {\r\n                        \"code\": \"standardTime\",\r\n                        \"quantity\": 1.2\r\n                    },\r\n                    {\r\n                        \"code\": \"adjustedStandardTime\",\r\n                        \"quantity\": 1.5\r\n                    }\r\n                ],\r\n                \"timeCode\": \"adjustedStandardTime\"\r\n            },\r\n            \"invoiceLines\": [\r\n                {\r\n                    \"id\": \"404503\",\r\n                    \"description\": \"Carry out 30,000 km maintenance.\"\r\n                },\r\n                {\r\n                    \"id\": \"5401\",\r\n                    \"description\": \"Replace engine oil.\"\r\n                },\r\n                {\r\n                    \"id\": \"408894\",\r\n                    \"description\": \"*  If the oil replacement indicator is displayed, change the engine oil and filter as soon as possible, After replacing the engine oil, reset the display.\"\r\n                },\r\n                {\r\n                    \"id\": \"5543\",\r\n                    \"description\": \"Replace engine oil & oil filter.\"\r\n                },\r\n                {\r\n                    \"id\": \"398831\",\r\n                    \"description\": \"Inspect drive belt and pulleys.\"\r\n                },\r\n                {\r\n                    \"id\": \"408969\",\r\n                    \"description\": \"*  Replace every 150,000 km (90,000 miles) / 60 months.\"\r\n                },\r\n                {\r\n                    \"id\": \"2023\",\r\n                    \"description\": \"Inspect cooling system.\"\r\n                },\r\n                {\r\n                    \"id\": \"395372\",\r\n                    \"description\": \"Inspect fuel lines.\"\r\n                },\r\n                {\r\n                    \"id\": \"398677\",\r\n                    \"description\": \"Inspect computer diagnosis.\"\r\n                },\r\n                {\r\n                    \"id\": \"408941\",\r\n                    \"description\": \"*  Perform diagnosis for all systems with CONSULT and check for DTC.\"\r\n                },\r\n                {\r\n                    \"id\": \"403842\",\r\n                    \"description\": \"Inspect headlamp alignment (except for 2nd interval).\"\r\n                },\r\n                {\r\n                    \"id\": \"403767\",\r\n                    \"description\": \"Inspect brake and clutch systems and fluid.\"\r\n                },\r\n                {\r\n                    \"id\": \"403856\",\r\n                    \"description\": \"Inspect manual transmission gear oil (for leaks).\"\r\n                },\r\n                {\r\n                    \"id\": \"395350\",\r\n                    \"description\": \"Inspect brake pads, rotors and other brake components.\"\r\n                },\r\n                {\r\n                    \"id\": \"403938\",\r\n                    \"description\": \"Replace air conditioner filter.\"\r\n                },\r\n                {\r\n                    \"id\": \"398672\",\r\n                    \"description\": \"Inspect body corrosion.\"\r\n                },\r\n                {\r\n                    \"id\": \"408928\",\r\n                    \"description\": \"*  Inspect once per year.\"\r\n                },\r\n                {\r\n                    \"id\": \"0\",\r\n                    \"description\": \"CArwash\",\r\n                    \"quantity\": 0.3\r\n                }\r\n            ],\r\n            \"parts\": [\r\n                {\r\n                    \"number\": \"1102600Q0H\",\r\n                    \"quantity\": 1,\r\n                    \"quantityUnitOfMeasure\": \"Each\",\r\n                    \"description\": \"WASHER-DRAIN PL\",\r\n                    \"alternatePart\": {},\r\n                    \"references\": {\r\n                        \"isPnc\": \"false\"\r\n                    }\r\n                },\r\n                {\r\n                    \"number\": \"A520800Q1DVA\",\r\n                    \"quantity\": 1,\r\n                    \"description\": \"OIL FILTER ASSY\",\r\n                    \"alternatePart\": {\r\n                        \"number\": \"1520800Q1D\",\r\n                        \"quantity\": 1,\r\n                        \"quantityUnitOfMeasure\": \"Each\",\r\n                        \"description\": \"OIL FILTER ASSY\",\r\n                        \"references\": {\r\n                            \"isPnc\": \"false\"\r\n                        }\r\n                    },\r\n                    \"references\": {\r\n                        \"isPnc\": \"false\",\r\n                        \"isAlternatePartFromServer\": \"true\"\r\n                    }\r\n                },\r\n                {\r\n                    \"number\": \"272774BU0A\",\r\n                    \"quantity\": 1,\r\n                    \"quantityUnitOfMeasure\": \"Each\",\r\n                    \"description\": \"AIR FILTER KIT-\",\r\n                    \"alternatePart\": {},\r\n                    \"references\": {\r\n                        \"isPnc\": \"false\"\r\n                    }\r\n                }\r\n            ],\r\n            \"sundries\": [\r\n                {\r\n                    \"id\": \"3511\",\r\n                    \"code\": \"OD\",\r\n                    \"description\": \"Oil Disposal\",\r\n                    \"quantity\": 1,\r\n                    \"quantityUnitOfMeasure\": \"Litre\"\r\n                },\r\n                {\r\n                    \"id\": \"3531\",\r\n                    \"code\": \"SS\",\r\n                    \"description\": \"Shop Supplies\",\r\n                    \"quantity\": 1,\r\n                    \"quantityUnitOfMeasure\": \"Litre\"\r\n                },\r\n                {\r\n                    \"id\": \"Ke90099933\",\r\n                    \"code\": \"Ke90099933\",\r\n                    \"description\": \"Engine Oil (ACEA C4)\",\r\n                    \"quantity\": 4.55,\r\n                    \"quantityUnitOfMeasure\": \"Litre\"\r\n                }\r\n            ],\r\n            \"references\": {\r\n                \"modelId\": \"56677\",\r\n                \"familyCode\": \"J11A\",\r\n                \"operationCodeId\": \"405219\",\r\n                \"variantCountOfOperation\": \"1\",\r\n                \"OperationCustomisationStrategy\": \"1520890640417\",\r\n                \"useAlternatePart\": \"true\",\r\n                \"hasOE\": \"true\",\r\n                \"hasAlternate\": \"true\",\r\n                \"OECommercialExists\": \"true\",\r\n                \"ALTERNATECommercialExists\": \"true\"\r\n            }\r\n        }\r\n    ],\r\n    \"taxLevels\": [\r\n        {\r\n            \"code\": \"BTW\",\r\n            \"percentage\": 20\r\n        },\r\n        {\r\n            \"code\": \"TAX\",\r\n            \"percentage\": 10\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#2) /get - Retrieve commercially priced quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b24f3499-eac2-4b94-9bbc-18dcda05bbbf",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the commercially priced quote through Order API",
											"pm.test(\"test total price of created technically priced quote\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(110);",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(100);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissCommercial_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissCommercial_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#3) /save - Create technically priced order with warranty code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "452f745a-06f5-4f69-a637-23d4b0dade08",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Standard)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissTechnical2_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissTechnical2_quoteID\", nissTechnical2_quoteID);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IFM-UID",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"externalId\": \"1\",\r\n    \"name\": \"Matthew Allen\",\r\n    \"taxSetting\": {\r\n      \"taxNumber\": \"TEST001\",\r\n      \"taxOffice\": \"TEST002\"\r\n    },\r\n    \"companyName\": \"IFM Australia\",\r\n    \"emailAddresses\": [\r\n      \"mallen@infomedia.com.au\"\r\n    ],\r\n    \"phones\": [\r\n      {\r\n        \"type\": \"Work\",\r\n        \"number\": \"5555555555\"\r\n      },\r\n      {\r\n        \"type\": \"Mobile\",\r\n        \"number\": \"5555555555\"\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n      {\r\n        \"lines\": [\r\n          \"3 Minna Close\"\r\n        ],\r\n        \"locality\": [\r\n          \"Belrose\"\r\n        ],\r\n        \"region\": \"NSW\",\r\n        \"postcode\": \"2085\",\r\n        \"country\": \"Australia\"\r\n      }\r\n    ],\r\n    \"references\": {\r\n      \"taxNumber\": \"TEST001\",\r\n      \"taxOffice\": \"TEST002\"\r\n    }\r\n  },\r\n    \"vehicles\": [\r\n        {\r\n            \"id\": \"5aa5c14ee4b022a3bb0de458\",\r\n            \"description\": \"J11 Qashqai Tekna 5DR Wagon 1.5L Turbo Diesel 2WD 4 Cyl 6sp Manual\",\r\n            \"vin\": \"SJNFAAJ11U1000347\",\r\n            \"registration\": \"EW364AK\",\r\n            \"transmissionCode\": \"F6\",\r\n            \"engineCode\": \"K9K\",\r\n            \"bodyType\": \"5DR\",\r\n            \"paintCode\": \"Z11\",\r\n            \"modelCode\": \"FTKALCYJ11TGA\"\r\n        }\r\n    ],  \r\n  \"operations\": [\r\n    {\r\n      \"id\": \"35643654\",\r\n      \"code\": \"RET\",\r\n      \"description\": \"RET: Replace engine thermostat.\",\r\n      \"variantDescription\": \"BAS:Basic Operation\",\r\n      \"variantType\": \"Basic\",\r\n      \"groupVariantId\": 35643654,\r\n      \"variants\": [\r\n        {\r\n          \"id\": \"1\",\r\n          \"description\": \"Basic Operation\",\r\n          \"code\": \"BAS\",\r\n          \"type\": \"Basic\"\r\n        }\r\n      ],\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"Nissan NL fixed rate\",\r\n              \"amount\": 71.76\r\n            }\r\n          ],\r\n\t\t  \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n          \"totals\": {\r\n            \"extendedPrice\": 57.41,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 57.41,\r\n            \"total\": 57.41\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 0.8\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"CD40A1\"\r\n        }\r\n      ],\r\n      \"invoiceLines\": [\r\n        {\r\n          \"id\": \"1242\",\r\n          \"description\": \"Replace engine thermostat.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"7086\",\r\n          \"description\": \"Includes drain, refill & bleed cooling system.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"6257\",\r\n          \"description\": \"Carry out final inspection and road test.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"1305031U00\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"GASKET-WATER IN\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 6.8\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 6.8,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 6.8,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 0.68\r\n                }\r\n              ],\r\n              \"total\": 7.48\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"A10\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"2120031U03\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"THERMOSTAT ASSY\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 53.56\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 53.56,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 53.56,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 5.36\r\n                }\r\n              ],\r\n              \"total\": 58.92\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"E60\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"214415V000\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"PACKING-DRAIN C\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 6.1\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 6.1,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 6.1,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 0.61\r\n                }\r\n              ],\r\n              \"total\": 6.71\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"E90\"\r\n          }\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"3511\",\r\n          \"code\": \"OD\",\r\n          \"description\": \"Oil Disposal\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 20,\r\n              \"total\": 20\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"3531\",\r\n          \"code\": \"SS\",\r\n          \"description\": \"Shop Supplies\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 20,\r\n              \"total\": 20\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"17670\",\r\n          \"code\": \"RC\",\r\n          \"description\": \"Radiator Coolant\",\r\n          \"quantity\": 9.2,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"totals\": {\r\n              \"extendedPrice\": 184,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 184,\r\n              \"total\": 184\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"totals\": {\r\n        \"subtotals\": {\r\n          \"labour\": 57.41,\r\n          \"parts\": 66.46,\r\n          \"sundries\": 224,\r\n          \"adjustments\": 0\r\n        },\r\n        \"totalExTax\": 347.87,\r\n        \"taxes\": [\r\n          {\r\n            \"code\": \"TAX\",\r\n            \"amount\": 6.65\r\n          }\r\n        ],\r\n        \"total\": 354.52\r\n      },\r\n      \"references\": {\r\n        \"modelId\": \"56857\",\r\n        \"familyCode\": \"Z34B\",\r\n        \"operationCodeId\": \"3204\",\r\n        \"variantCountOfOperation\": \"1\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\"\r\n      },\r\n      \"hasRecommendations\": false\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    },\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ],\r\n  \"isoCurrencyCode\": \"AUD\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#3) /get - Retrieve technically priced order with warranty code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4fec5af-fda9-4284-8231-299b75240c18",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test correct operation is present\", function () {",
											"    pm.expect(jsonData.operations[0].description).to.eql(\"RET: Replace engine thermostat.\");",
											"});",
											"",
											"pm.test(\"Test warranty code is present\", function () {",
											"    pm.expect(jsonData.operations[0].warrantyCodes[0].code).to.eql(\"CD40A1\");",
											"});",
											"",
											"pm.test(\"Test total technical price of order\", function () {",
											"    pm.expect(jsonData.totals.total).to.eql(354.52);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissTechnical2_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissTechnical2_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#4) /save - Create order with Dealer Menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6131838c-c13a-495e-9b9c-67ac25dbbd30",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Standard)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissDealerMenu_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissDealerMenu_quoteID\", nissDealerMenu_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IFM-UID",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"name\": \"Dealer Menu\",\r\n    \"taxSetting\": {\r\n      \"taxNumber\": \"TEST003\",\r\n      \"taxOffice\": \"TEST004\"\r\n    },\r\n    \"companyName\": \"IFM\",\r\n    \"emailAddresses\": [\r\n      \"mallen@infomedia.com.au\"\r\n    ],\r\n    \"phones\": [\r\n      {\r\n        \"type\": \"Work\",\r\n        \"number\": \"5555555555\"\r\n      },\r\n      {\r\n        \"type\": \"Mobile\",\r\n        \"number\": \"5565555555\"\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n      {\r\n        \"lines\": [\r\n          \"3 Minna Close\"\r\n        ],\r\n        \"locality\": [\r\n          \"Belrose\"\r\n        ],\r\n        \"region\": \"NSW\",\r\n        \"postcode\": \"2085\",\r\n        \"country\": \"Australia\"\r\n      }\r\n    ],\r\n    \"references\": {\r\n      \"taxNumber\": \"TEST003\",\r\n      \"taxOffice\": \"TEST004\"\r\n    }\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5bdbdce2bd5ccd4998826a22\",\r\n      \"description\": \"UA0 Pixo Acenta 5DR Hatchback 1.0L 3Cyl 4sp Automatic\",\r\n      \"vin\": \"MBHHFD31S00543920\",\r\n      \"transmissionCode\": \"4AT\",\r\n      \"engineCode\": \"K10B\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"ZHJ\",\r\n      \"modelCode\": \"FQAALBAUA0LQB\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"5bdbdc30bd5ccd4998826a04\",\r\n      \"code\": \"AQATEST1\",\r\n      \"description\": \"AQA Test Operation\",\r\n      \"variantDescription\": \"AQA Test Operation\",\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"Nissan NL fixed rate\",\r\n              \"amount\": 71.76\r\n            }\r\n          ],\r\n\t\t  \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n          \"totals\": {\r\n            \"extendedPrice\": 71.76,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 71.76,\r\n            \"total\": 71.76\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"1010101010\"\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"165464BA1A\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"AIR CLEANER ELE\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 17.17\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 17.17,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 17.17,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 1.72\r\n                }\r\n              ],\r\n              \"total\": 18.89\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"E11\"\r\n          }\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"402304\",\r\n          \"code\": \"AF114\",\r\n          \"description\": \"Automatic Transmission Fluid (Nissan NS-1 CVT)\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 0\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"totals\": {\r\n        \"subtotals\": {\r\n          \"labour\": 71.76,\r\n          \"parts\": 17.17,\r\n          \"sundries\": 0,\r\n          \"adjustments\": 0\r\n        },\r\n        \"totalExTax\": 88.93,\r\n        \"taxes\": [\r\n          {\r\n            \"code\": \"TAX\",\r\n            \"amount\": 1.72\r\n          }\r\n        ],\r\n        \"total\": 90.65\r\n      },\r\n      \"references\": {\r\n        \"modelId\": \"56847\",\r\n        \"familyCode\": \"UA0A\",\r\n        \"isCustomOperation\": \"true\",\r\n        \"operationCodeId\": \"64439910\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\"\r\n      },\r\n      \"hasRecommendations\": false\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    },\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ],\r\n  \"isoCurrencyCode\": \"AUD\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#4) /get - Retrieve order with Dealer Menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "069169d5-f313-4314-9093-995ded64d035",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test correct operation is present\", function () {",
											"    pm.expect(jsonData.operations[0].description).to.eql(\"AQA Test Operation\");",
											"});",
											"",
											"pm.test(\"Test warranty code is present\", function () {",
											"    pm.expect(jsonData.operations[0].warrantyCodes[0].code).to.eql(\"1010101010\");",
											"});",
											"",
											"pm.test(\"Test total technical price of order\", function () {",
											"    pm.expect(jsonData.totals.total).to.eql(90.65);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissDealerMenu_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissDealerMenu_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#5) /save - Create order with custom operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf3d395f-28c3-4ce5-8ab5-84860084b5ed",
										"exec": [
											"//Create commerciallyy priced quote (PricingMethod: Fiexed price + amount + taxes)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissCustomOperation_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissCustomOperation_quoteID\", nissCustomOperation_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5b5e66aee4b0b36950e7e21e\",\r\n      \"description\": \"K13 Micra Tekna 5DR Hatchback 1.2L 3Cyl 5sp Manual\",\r\n      \"vin\": \"MDHFBUK13U0062837\",\r\n      \"registration\": \"03RTX7\",\r\n      \"transmissionCode\": \"5MT\",\r\n      \"engineCode\": \"HR12DE\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"QM1\",\r\n      \"modelCode\": \"FDWULVGK13EG5\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"code\": \"TESTCODE1\",\r\n\t  \"id\": \"-1\",\r\n      \"status\": {\r\n        \"authorized\": true,\r\n        \"authorizationStatus\": \"PreBooked\"\r\n      },\r\n      \"pricingMethod\": {\r\n        \"method\": \"Fixed\",\r\n        \"amountIncludingTax\": 500\r\n      },\r\n      \"description\": \"Test this random operation please\",\r\n      \"isNew\": false,\r\n      \"labour\": {\r\n        \"description\": \"Test this random operation please\"\r\n      },\r\n      \"totals\": {\r\n        \"total\": 500\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    },\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								},
								"description": "Create order with custom operation created in the order itself. "
							},
							"response": []
						},
						{
							"name": "Order API (#5) /get - Retrieve order with custom operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbc59550-392d-41f5-a8fa-b9abd1c1cb7f",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the commercially priced quote through Order API",
											"pm.test(\"Test total price of quote with custom operation\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(500);",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(500);",
											"});",
											"",
											"pm.test(\"Test price type of quote returns correctly\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissCustomOperation_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissCustomOperation_quoteID}}"
										}
									]
								},
								"description": "Retrieve the order with (non-SSM) custom operation"
							},
							"response": []
						},
						{
							"name": "Order API (#6) /save - Create order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bc0e08b-07f6-46cc-bde6-079cf8723beb",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissDeleteOperation_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissDeleteOperation_quoteID\", nissDeleteOperation_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderNumber\": \"75\",\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"firstName\": \"Donald\",\r\n    \"lastName\": \"Duck\",\r\n    \"name\": \"Donald Duck\",\r\n    \"taxSetting\": {},\r\n    \"companyName\": \"Fake Disney\",\r\n    \"emailAddresses\": [\r\n      \"mallen@infomedia.com.au\"\r\n    ],\r\n    \"addresses\": [\r\n      {\r\n        \"countryCode\": \"DE\",\r\n        \"type\": \"Mailing\"\r\n      }\r\n    ]\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5ccfaf17b1099f220f0c5b7b\",\r\n      \"description\": \"D23 NP300 Navara N-Connecta Double Cab 4WD 2.3L 4 Cyl Turbo Diesel 6sp Manual\",\r\n      \"vin\": \"VSKCTND23U0028459\",\r\n      \"registration\": \"BITHD63\",\r\n      \"transmissionCode\": \"6MT\",\r\n      \"engineCode\": \"YS23DDTT\",\r\n      \"bodyType\": \"4DR\",\r\n      \"paintCode\": \"CAQ\",\r\n      \"modelCode\": \"CTS4LSYD23IQR\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"39230160\",\r\n      \"code\": \"RBDFP\",\r\n      \"description\": \"RBDFP: Replace both front disc brake rotors and brake pads.\",\r\n      \"variantDescription\": \"BAS:Basic Operation\",\r\n      \"variantType\": \"Basic\",\r\n      \"groupVariantId\": 39230160,\r\n      \"variants\": [\r\n        {\r\n          \"id\": \"1\",\r\n          \"description\": \"Basic Operation\",\r\n          \"code\": \"BAS\",\r\n          \"type\": \"Basic\"\r\n        }\r\n      ],\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"Nissan NL fixed rate\",\r\n              \"amount\": 71.76\r\n            }\r\n          ],\r\n\t\t  \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n          \"totals\": {\r\n            \"extendedPrice\": 71.76,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 71.76,\r\n            \"total\": 71.76\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\"\r\n      },\r\n      \"invoiceLines\": [\r\n        {\r\n          \"id\": \"2166\",\r\n          \"description\": \"Replace both front disc brake rotors and brake pads.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"6937\",\r\n          \"description\": \"Includes removal and refitting of wheels and calipers.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"6257\",\r\n          \"description\": \"Carry out final inspection and road test.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"402064KJ1B\",\r\n          \"quantity\": 2,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"ROTOR-DISC BRAK\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 65.3\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 130.6,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 130.6,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 13.06\r\n                }\r\n              ],\r\n              \"total\": 143.66\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"L23\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"D1MFM4KJ1J\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"PAD KIT-DISC BR\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 46.43\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 46.43,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 46.43,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 4.64\r\n                }\r\n              ],\r\n              \"total\": 51.07\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"L62\"\r\n          }\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"3531\",\r\n          \"code\": \"SS\",\r\n          \"description\": \"Shop Supplies\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 20,\r\n              \"total\": 20\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"totals\": {\r\n        \"subtotals\": {\r\n          \"labour\": 71.76,\r\n          \"parts\": 177.03,\r\n          \"sundries\": 20,\r\n          \"adjustments\": 0\r\n        },\r\n        \"totalExTax\": 268.79,\r\n        \"taxes\": [\r\n          {\r\n            \"code\": \"TAX\",\r\n            \"amount\": 17.7\r\n          }\r\n        ],\r\n        \"total\": 286.49\r\n      },\r\n      \"references\": {\r\n        \"modelId\": \"62171\",\r\n        \"familyCode\": \"D23A\",\r\n        \"operationCodeId\": \"3141\",\r\n        \"variantCountOfOperation\": \"1\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\"\r\n      },\r\n      \"hasRecommendations\": false\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    },\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ],\r\n  \"isoCurrencyCode\": \"AUD\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#6) /get - Retrieve this order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1282af49-4c2e-4352-ae18-0850198b6a61",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test total price of quote\", function () {",
											"    pm.expect(jsonData.totals.total).to.eql(286.49);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissDeleteOperation_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissDeleteOperation_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#6) /delete - Delete order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5d6233a-27d4-4576-82ca-0a59b5e953a0",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Confirm that deleted quote ID returns in this call\", function () {",
											"    var response = JSON.parse(responseBody);",
											"    tests['Correct ID returns'] = environment[\"nissDeleteOperation_quoteID\"] == response.id;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/delete?id={{nissDeleteOperation_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"delete"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissDeleteOperation_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#6) /get - Confirm order is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "436368bf-9e20-4a07-b81e-c94dc11ba344",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test that status is Deleted\", function () {",
											"    pm.expect(jsonData.status).to.eql(\"Deleted\");",
											"});",
											"",
											"pm.test(\"Test total price of quote\", function () {",
											"    pm.expect(jsonData.totals.total).to.eql(286.49);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissDeleteOperation_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissDeleteOperation_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#7) /saveBatch - Create a batch of 2 separate orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d358e4a-6e41-490b-8856-da2c2c417356",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let nissBatchOrder1_id = jsonData.results[0].id;",
											"let nissBatchOrder2_id = jsonData.results[1].id;",
											"",
											"pm.environment.set(\"nissBatchOrder1_id\", nissBatchOrder1_id);",
											"pm.environment.set(\"nissBatchOrder2_id\", nissBatchOrder2_id);",
											"",
											"//Set a 5 second delay to negate lag when changing sites in LP",
											"setTimeout(function(){}, 5000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orders\": \n[\n{\n  \"type\": \"Quotation\",\n    \"customer\": {\n        \"id\": \"5aa5c14ee4b022a3bb0de45a\",\n        \"taxSetting\": {}\n    },\n    \"vehicles\": [\n        {\n            \"id\": \"5aa5c14ee4b022a3bb0de458\",\n            \"description\": \"J11 Qashqai Tekna 5DR Wagon 1.5L Turbo Diesel 2WD 4 Cyl 6sp Manual\",\n            \"vin\": \"SJNFAAJ11U1000347\",\n            \"registration\": \"EW364AK\",\n            \"transmissionCode\": \"F6\",\n            \"engineCode\": \"K9K\",\n            \"bodyType\": \"5DR\",\n            \"paintCode\": \"Z11\",\n            \"modelCode\": \"FTKALCYJ11TGA\"\n        }\n    ],\n    \"currency\": \"AUD\",\n  \"operations\": [\n    {\n      \"id\": \"41583201\",\n      \"code\": \"S30KMNE\",\n      \"pricingMethod\": {\n        \"method\": \"Standard\"\n      },\n      \"description\": \"S30KMNE: Carry out 30,000 km maintenance.\",\n      \"variantDescription\": \"OPT: EURO5 - Euro 5, VIN:°1400110 - VIN Breakpoint\",\n      \"variantType\": \"Other\",\n      \"groupVariantId\": 41583201,\n      \"variants\": [\n        {\n          \"id\": \"3873091\",\n          \"description\": \"Euro 5\",\n          \"code\": \"EURO5\",\n          \"type\": \"Option\"\n        },\n        {\n          \"id\": \"4258060\",\n          \"description\": \"VIN Breakpoint\",\n          \"code\": \"°1400110\",\n          \"type\": \"VINBreakpoint\"\n        },\n        {\n          \"id\": \"1256303\",\n          \"description\": \"Excluding Estonia\",\n          \"code\": \"-EE\",\n          \"type\": \"Country\"\n        },\n        {\n          \"id\": \"301513\",\n          \"description\": \"Excluding Greece\",\n          \"code\": \"-GR\",\n          \"type\": \"Country\"\n        }\n      ],\n      \"labour\": {\n        \"pricing\": {\n          \"priceLevels\": [\n            {\n              \"code\": \"Nissan NL fixed rate\",\n              \"amount\": 71.76\n            }\n          ],\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\n          \"adjustmentPercentage\": 7,\n          \"totals\": {\n            \"extendedPrice\": 107.64,\n            \"adjustment\": 7.53,\n            \"totalExTax\": 100.11,\n            \"total\": 100.11\n          }\n        },\n        \"times\": [\n          {\n            \"code\": \"standardTime\",\n            \"quantity\": 1.2\n          },\n          {\n            \"code\": \"adjustedStandardTime\",\n            \"quantity\": 1.5\n          }\n        ],\n        \"timeCode\": \"adjustedStandardTime\"\n      },\n      \"invoiceLines\": [\n        {\n          \"id\": \"404503\",\n          \"description\": \"Carry out 30,000 km maintenance.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"5401\",\n          \"description\": \"Replace engine oil.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"408894\",\n          \"description\": \"*  If the oil replacement indicator is displayed, change the engine oil and filter as soon as possible, After replacing the engine oil, reset the display.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"5543\",\n          \"description\": \"Replace engine oil & oil filter.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"398831\",\n          \"description\": \"Inspect drive belt and pulleys.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"408969\",\n          \"description\": \"*  Replace every 150,000 km (90,000 miles) / 60 months.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"2023\",\n          \"description\": \"Inspect cooling system.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"395372\",\n          \"description\": \"Inspect fuel lines.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"398677\",\n          \"description\": \"Inspect computer diagnosis.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"408941\",\n          \"description\": \"*  Perform diagnosis for all systems with CONSULT and check for DTC.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"403842\",\n          \"description\": \"Inspect headlamp alignment (except for 2nd interval).\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"403767\",\n          \"description\": \"Inspect brake and clutch systems and fluid.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"403856\",\n          \"description\": \"Inspect manual transmission gear oil (for leaks).\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"395350\",\n          \"description\": \"Inspect brake pads, rotors and other brake components.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"403938\",\n          \"description\": \"Replace air conditioner filter.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"398672\",\n          \"description\": \"Inspect body corrosion.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"408928\",\n          \"description\": \"*  Inspect once per year.\",\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        },\n        {\n          \"id\": \"0\",\n          \"description\": \"CArwash\",\n          \"quantity\": 0.3,\n          \"pricing\": {\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        }\n      ],\n      \"parts\": [\n        {\n          \"number\": \"1102600Q0H\",\n          \"quantity\": 1,\n          \"quantityUnitOfMeasure\": \"Each\",\n          \"description\": \"WASHER-DRAIN PL\",\n          \"alternatePart\": {\n            \"pricing\": {\n              \"adjustmentPercentage\": 7,\n              \"totals\": {\n                \"extendedPrice\": 0,\n                \"adjustment\": 0,\n                \"totalExTax\": 0,\n                \"total\": 0\n              }\n            }\n          },\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"DLR\",\n                \"amount\": 1.06\n              }\n            ],\n      \"priceLevelCode\": \"DLR\",\n            \"taxes\": [\n              \"TAX\"\n            ],\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 1.06,\n              \"adjustment\": 0.07,\n              \"totalExTax\": 0.99,\n              \"taxes\": [\n                {\n                  \"code\": \"TAX\",\n                  \"amount\": 0.1\n                }\n              ],\n              \"total\": 1.09\n            }\n          },\n          \"references\": {\n            \"isPnc\": \"false\"\n          }\n        },\n        {\n          \"number\": \"A520800Q1DVA\",\n          \"quantity\": 1,\n          \"description\": \"OIL FILTER ASSY\",\n          \"alternatePart\": {\n            \"number\": \"1520800Q1D\",\n            \"quantity\": 1,\n            \"quantityUnitOfMeasure\": \"Each\",\n            \"description\": \"OIL FILTER ASSY\",\n            \"pricing\": {\n              \"priceLevels\": [\n                {\n                  \"code\": \"DLR\",\n                  \"amount\": 8.96\n                }\n              ],\n        \"priceLevelCode\": \"DLR\",\n              \"taxes\": [\n                \"TAX\"\n              ],\n              \"adjustmentPercentage\": 7,\n              \"totals\": {\n                \"extendedPrice\": 8.96,\n                \"adjustment\": 0.63,\n                \"totalExTax\": 8.33,\n                \"taxes\": [\n                  {\n                    \"code\": \"TAX\",\n                    \"amount\": 0.83\n                  }\n                ],\n                \"total\": 9.16\n              }\n            },\n            \"references\": {\n              \"isPnc\": \"false\"\n            }\n          },\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"DLR\",\n                \"amount\": 7.53\n              }\n            ],\n      \"priceLevelCode\": \"DLR\",\n            \"taxes\": [\n              \"TAX\"\n            ],\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 7.53,\n              \"adjustment\": 0.53,\n              \"totalExTax\": 7,\n              \"taxes\": [\n                {\n                  \"code\": \"TAX\",\n                  \"amount\": 0.7\n                }\n              ],\n              \"total\": 7.7\n            }\n          },\n          \"references\": {\n            \"isPnc\": \"false\",\n            \"isAlternatePartFromServer\": \"true\"\n          }\n        },\n        {\n          \"number\": \"272774BU0A\",\n          \"quantity\": 1,\n          \"quantityUnitOfMeasure\": \"Each\",\n          \"description\": \"AIR FILTER KIT-\",\n          \"alternatePart\": {\n            \"pricing\": {\n              \"adjustmentPercentage\": 7,\n              \"totals\": {\n                \"extendedPrice\": 0,\n                \"adjustment\": 0,\n                \"totalExTax\": 0,\n                \"total\": 0\n              }\n            }\n          },\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"DLR\",\n                \"amount\": 17.9\n              }\n            ],\n      \"priceLevelCode\": \"DLR\",\n            \"taxes\": [\n              \"TAX\"\n            ],\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 17.9,\n              \"adjustment\": 1.25,\n              \"totalExTax\": 16.65,\n              \"taxes\": [\n                {\n                  \"code\": \"TAX\",\n                  \"amount\": 1.67\n                }\n              ],\n              \"total\": 18.32\n            }\n          },\n          \"references\": {\n            \"isPnc\": \"false\"\n          }\n        }\n      ],\n      \"sundries\": [\n        {\n          \"id\": \"3511\",\n          \"code\": \"OD\",\n          \"description\": \"Oil Disposal\",\n          \"quantity\": 1,\n          \"quantityUnitOfMeasure\": \"Litre\",\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"Nissan NL fixed rate\",\n                \"amount\": 20\n              }\n            ],\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 20,\n              \"adjustment\": 1.4,\n              \"totalExTax\": 18.6,\n              \"total\": 18.6\n            }\n          }\n        },\n        {\n          \"id\": \"3531\",\n          \"code\": \"SS\",\n          \"description\": \"Shop Supplies\",\n          \"quantity\": 1,\n          \"quantityUnitOfMeasure\": \"Litre\",\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"Nissan NL fixed rate\",\n                \"amount\": 20\n              }\n            ],\n      \"priceLevelCode\": \"Nissan NL fixed rate\",\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 20,\n              \"adjustment\": 1.4,\n              \"totalExTax\": 18.6,\n              \"total\": 18.6\n            }\n          }\n        },\n        {\n          \"id\": \"Ke90099933\",\n          \"code\": \"Ke90099933\",\n          \"description\": \"Engine Oil (ACEA C4)\",\n          \"quantity\": 4.55,\n          \"quantityUnitOfMeasure\": \"Litre\",\n          \"pricing\": {\n            \"priceLevels\": [\n              {\n                \"code\": \"DLR\",\n                \"amount\": 0\n              },\n              {\n                \"code\": \"Nissan NL fixed rate\",\n                \"amount\": 0\n              }\n            ],\n      \"priceLevelCode\": \"DLR\",\n            \"adjustmentPercentage\": 7,\n            \"totals\": {\n              \"extendedPrice\": 0,\n              \"adjustment\": 0,\n              \"totalExTax\": 0,\n              \"total\": 0\n            }\n          }\n        }\n      ],\n      \"references\": {\n        \"modelId\": \"56677\",\n        \"familyCode\": \"J11A\",\n        \"operationCodeId\": \"405219\",\n        \"variantCountOfOperation\": \"1\",\n        \"OperationCustomisationStrategy\": \"1520829271943\",\n        \"useAlternatePart\": \"true\",\n        \"hasOE\": \"true\",\n        \"hasAlternate\": \"true\"\n      }\n    }\n  ],\n  \"taxLevels\": [\n    {\n      \"code\": \"BTW\",\n      \"percentage\": 20\n    },\n    {\n      \"code\": \"TAX\",\n      \"percentage\": 10\n    }\n  ]\n}, \n{\n  \"type\": \"Quotation\",\n    \"customer\": {\n        \"id\": \"5aa5c14ee4b022a3bb0de45a\",\n        \"taxSetting\": {}\n    },\n    \"vehicles\": [\n        {\n            \"id\": \"5aa5c14ee4b022a3bb0de458\",\n            \"description\": \"J11 Qashqai Tekna 5DR Wagon 1.5L Turbo Diesel 2WD 4 Cyl 6sp Manual\",\n            \"vin\": \"SJNFAAJ11U1000347\",\n            \"registration\": \"EW364AK\",\n            \"transmissionCode\": \"F6\",\n            \"engineCode\": \"K9K\",\n            \"bodyType\": \"5DR\",\n            \"paintCode\": \"Z11\",\n            \"modelCode\": \"FTKALCYJ11TGA\"\n        }\n    ],\n    \"currency\": \"AUD\",\n    \"operations\": [\n        {\n            \"id\": \"41583201\",\n            \"code\": \"S30KMNE\",\n            \"pricingMethod\": {\n                \"method\": \"Fixed\",\n                \"amount\": 100,\n        \"taxes\": [\n              \"TAX\"\n              ]\n            },\n            \"description\": \"S30KMNE: Carry out 30,000 km maintenance.\",\n            \"variantDescription\": \"OPT: EURO5 - Euro 5, VIN:°1400110 - VIN Breakpoint\",\n            \"variantType\": \"Other\",\n            \"groupVariantId\": 41583201,\n            \"variants\": [\n                {\n                    \"id\": \"3873091\",\n                    \"description\": \"Euro 5\",\n                    \"code\": \"EURO5\",\n                    \"type\": \"Option\"\n                },\n                {\n                    \"id\": \"4258060\",\n                    \"description\": \"VIN Breakpoint\",\n                    \"code\": \"°1400110\",\n                    \"type\": \"VINBreakpoint\"\n                },\n                {\n                    \"id\": \"1256303\",\n                    \"description\": \"Excluding Estonia\",\n                    \"code\": \"-EE\",\n                    \"type\": \"Country\"\n                },\n                {\n                    \"id\": \"301513\",\n                    \"description\": \"Excluding Greece\",\n                    \"code\": \"-GR\",\n                    \"type\": \"Country\"\n                }\n            ],\n            \"labour\": {\n                \"times\": [\n                    {\n                        \"code\": \"standardTime\",\n                        \"quantity\": 1.2\n                    },\n                    {\n                        \"code\": \"adjustedStandardTime\",\n                        \"quantity\": 1.5\n                    }\n                ],\n                \"timeCode\": \"adjustedStandardTime\"\n            },\n            \"invoiceLines\": [\n                {\n                    \"id\": \"404503\",\n                    \"description\": \"Carry out 30,000 km maintenance.\"\n                },\n                {\n                    \"id\": \"5401\",\n                    \"description\": \"Replace engine oil.\"\n                },\n                {\n                    \"id\": \"408894\",\n                    \"description\": \"*  If the oil replacement indicator is displayed, change the engine oil and filter as soon as possible, After replacing the engine oil, reset the display.\"\n                },\n                {\n                    \"id\": \"5543\",\n                    \"description\": \"Replace engine oil & oil filter.\"\n                },\n                {\n                    \"id\": \"398831\",\n                    \"description\": \"Inspect drive belt and pulleys.\"\n                },\n                {\n                    \"id\": \"408969\",\n                    \"description\": \"*  Replace every 150,000 km (90,000 miles) / 60 months.\"\n                },\n                {\n                    \"id\": \"2023\",\n                    \"description\": \"Inspect cooling system.\"\n                },\n                {\n                    \"id\": \"395372\",\n                    \"description\": \"Inspect fuel lines.\"\n                },\n                {\n                    \"id\": \"398677\",\n                    \"description\": \"Inspect computer diagnosis.\"\n                },\n                {\n                    \"id\": \"408941\",\n                    \"description\": \"*  Perform diagnosis for all systems with CONSULT and check for DTC.\"\n                },\n                {\n                    \"id\": \"403842\",\n                    \"description\": \"Inspect headlamp alignment (except for 2nd interval).\"\n                },\n                {\n                    \"id\": \"403767\",\n                    \"description\": \"Inspect brake and clutch systems and fluid.\"\n                },\n                {\n                    \"id\": \"403856\",\n                    \"description\": \"Inspect manual transmission gear oil (for leaks).\"\n                },\n                {\n                    \"id\": \"395350\",\n                    \"description\": \"Inspect brake pads, rotors and other brake components.\"\n                },\n                {\n                    \"id\": \"403938\",\n                    \"description\": \"Replace air conditioner filter.\"\n                },\n                {\n                    \"id\": \"398672\",\n                    \"description\": \"Inspect body corrosion.\"\n                },\n                {\n                    \"id\": \"408928\",\n                    \"description\": \"*  Inspect once per year.\"\n                },\n                {\n                    \"id\": \"0\",\n                    \"description\": \"CArwash\",\n                    \"quantity\": 0.3\n                }\n            ],\n            \"parts\": [\n                {\n                    \"number\": \"1102600Q0H\",\n                    \"quantity\": 1,\n                    \"quantityUnitOfMeasure\": \"Each\",\n                    \"description\": \"WASHER-DRAIN PL\",\n                    \"alternatePart\": {},\n                    \"references\": {\n                        \"isPnc\": \"false\"\n                    }\n                },\n                {\n                    \"number\": \"A520800Q1DVA\",\n                    \"quantity\": 1,\n                    \"description\": \"OIL FILTER ASSY\",\n                    \"alternatePart\": {\n                        \"number\": \"1520800Q1D\",\n                        \"quantity\": 1,\n                        \"quantityUnitOfMeasure\": \"Each\",\n                        \"description\": \"OIL FILTER ASSY\",\n                        \"references\": {\n                            \"isPnc\": \"false\"\n                        }\n                    },\n                    \"references\": {\n                        \"isPnc\": \"false\",\n                        \"isAlternatePartFromServer\": \"true\"\n                    }\n                },\n                {\n                    \"number\": \"272774BU0A\",\n                    \"quantity\": 1,\n                    \"quantityUnitOfMeasure\": \"Each\",\n                    \"description\": \"AIR FILTER KIT-\",\n                    \"alternatePart\": {},\n                    \"references\": {\n                        \"isPnc\": \"false\"\n                    }\n                }\n            ],\n            \"sundries\": [\n                {\n                    \"id\": \"3511\",\n                    \"code\": \"OD\",\n                    \"description\": \"Oil Disposal\",\n                    \"quantity\": 1,\n                    \"quantityUnitOfMeasure\": \"Litre\"\n                },\n                {\n                    \"id\": \"3531\",\n                    \"code\": \"SS\",\n                    \"description\": \"Shop Supplies\",\n                    \"quantity\": 1,\n                    \"quantityUnitOfMeasure\": \"Litre\"\n                },\n                {\n                    \"id\": \"Ke90099933\",\n                    \"code\": \"Ke90099933\",\n                    \"description\": \"Engine Oil (ACEA C4)\",\n                    \"quantity\": 4.55,\n                    \"quantityUnitOfMeasure\": \"Litre\"\n                }\n            ],\n            \"references\": {\n                \"modelId\": \"56677\",\n                \"familyCode\": \"J11A\",\n                \"operationCodeId\": \"405219\",\n                \"variantCountOfOperation\": \"1\",\n                \"OperationCustomisationStrategy\": \"1520890640417\",\n                \"useAlternatePart\": \"true\",\n                \"hasOE\": \"true\",\n                \"hasAlternate\": \"true\",\n                \"OECommercialExists\": \"true\",\n                \"ALTERNATECommercialExists\": \"true\"\n            }\n        }\n    ],\n    \"taxLevels\": [\n        {\n            \"code\": \"BTW\",\n            \"percentage\": 20\n        },\n        {\n            \"code\": \"TAX\",\n            \"percentage\": 10\n        }\n    ]\n}\n]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/saveBatch",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"saveBatch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#7a) /get - Retrieve the first order in batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db021098-af44-44e8-92e2-a7af66cbb09f",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test total price of technically priced quote created through Order API\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totals.total).to.eql(189.15);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissBatchOrder1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissBatchOrder1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order API (#7b) /get - Retrieve the second order in batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9102c115-7478-4b64-b4bb-a5dc294e17ba",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test total price of created technically priced quote\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totals.total).to.eql(110);",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(100);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissBatchOrder2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissBatchOrder2_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c94333fa-281d-457c-a547-7342418bd917",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1d68fac-5be5-4c34-8082-eb0f80b1b52c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Nissan Order API",
					"item": [
						{
							"name": "Authenticate Nissan Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3dd10ce-f519-4a05-951a-961289c9befa",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//set Nissan Provider account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let NISSProvider_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"NISSProvider_token\", NISSProvider_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISS_provider}}&refreshToken={{NISS_refreshToken}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISS_provider}}"
										},
										{
											"key": "refreshToken",
											"value": "{{NISS_refreshToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send order to SSMv2 through Nissan Europe DMS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96b2685e-d1f6-4abd-9652-81037ba515be",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "068b84dd-ee7c-4421-a7c1-c79685f891f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"IFM Basket has been created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"IFM_BASKET\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml"
									},
									{
										"key": "username",
										"value": "st.qa.nissan.eu1@ifm.com"
									},
									{
										"key": "dealerId",
										"value": "IFMQA123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_request>\r\n<dms:input>\r\n<dms:VIN>SJNFAAJ11U1000347</dms:VIN>\r\n<dms:RegistrationNumber>EW364AK</dms:RegistrationNumber>\r\n<dms:CarMileage>30000</dms:CarMileage>\r\n<dms:CustomerNumber>13</dms:CustomerNumber>\r\n<dms:CustomerLastName>Peter</dms:CustomerLastName>\r\n<dms:CustomerFirstName>David</dms:CustomerFirstName>\r\n<dms:CustomerAddressLine1>13</dms:CustomerAddressLine1>\r\n<dms:CustomerAddressCity>Belrose</dms:CustomerAddressCity>\r\n<dms:CustomerAddressRegion>Sydney</dms:CustomerAddressRegion>\r\n<dms:CustomerAddressPostalCode>12345</dms:CustomerAddressPostalCode>\r\n<dms:CustomerTelephoneNumber>1234567890</dms:CustomerTelephoneNumber>\r\n<dms:CustomerFaxNumber>0987654321</dms:CustomerFaxNumber>\r\n<dms:CustomerEmailAddress>tzhu@email.com</dms:CustomerEmailAddress>\r\n<dms:FiscalCode>fcode</dms:FiscalCode>\r\n<dms:ServiceAdvisorFullName>Service Advisor</dms:ServiceAdvisorFullName>\r\n</dms:input>\r\n</dms:Quotation_request>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve order from SSMv2 through Nissan Europe DMS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d02e0ce5-db03-4c38-a090-d9d4e8af2531",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "adec4123-2797-420a-b09d-f4de330dba26",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected vechile Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"SJNFAAJ11U1000347\";",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"S30KMNE\";",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml"
									},
									{
										"key": "username",
										"value": "api.nissan@microcat.com"
									},
									{
										"key": "dealerId",
										"value": "IFMQA123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>5b109677e4b0b5db6e67d98c</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan Order - Retrieve Order #1 (sent from Order API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "908d4b25-b7cd-4816-af20-42c50c8488ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected vechile Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"SJNFAAJ11U1000347\";",
											"",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"S30KMNE\";",
											"",
											"",
											"//check the operation totals",
											"tests[\"Check Expected operation total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"189.15\";"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e33a3905-cb0c-448a-9995-72f4814586e7",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									},
									{
										"key": "username",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text"
									},
									{
										"key": "dealerId",
										"value": "IFMAQA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissTechnical_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan Order - Retrieve Order #2 (sent from Order API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "378cbd47-00dd-412d-9d86-569f35e0ae62",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected vechile Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"SJNFAAJ11U1000347\";",
											"",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"S30KMNE\";",
											"",
											"",
											"//check the operation totals",
											"tests[\"Check Expected operation total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"110.0\";"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3407ddcb-8a08-4eae-8fc0-971c4b3c6715",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									},
									{
										"key": "username",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text"
									},
									{
										"key": "dealerId",
										"value": "IFMAQA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissCommercial_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan Order - Retrieve Order #3 (sent from Order API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae7659c1-faa5-41d6-b5b4-198a1cf7a06e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected vechile Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"SJNFAAJ11U1000347\";",
											"",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"RET\";",
											"",
											"",
											"//check the operation totals",
											"tests[\"Check Expected operation total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"354.52\";",
											"",
											"//Check FRS Code",
											"tests[\"Check FRS Codes\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.operations.Operation[0].FRScodes.FRScode.FRScode === \"CD40A1\";"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19f3f8f2-6079-41bb-817b-328f470cb2f7",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									},
									{
										"key": "username",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text"
									},
									{
										"key": "dealerId",
										"value": "IFMAQA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissTechnical2_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan Order - Retrieve Order #4 (sent from Order API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5845654-9f37-4bdb-b362-da9dcb1e762c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected Vehicle Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"MBHHFD31S00543920\";",
											"",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"AQATEST1\";",
											"",
											"",
											"//check the operation totals",
											"tests[\"Check Expected operation total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"90.65\";",
											"",
											"//Check FRS Code",
											"tests[\"Check FRS Codes\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.operations.Operation[0].FRScodes.FRScode.FRScode === \"1010101010\";"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed96726b-415d-4716-bb7d-ab0aa3ef44d9",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									},
									{
										"key": "username",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text"
									},
									{
										"key": "dealerId",
										"value": "IFMAQA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissDealerMenu_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan Order - Retrieve Order #5 (sent from Order API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15a8950b-9a5e-4e8b-a8d8-ca1905e20b45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"//check the vechile modle",
											"tests[\"Check Expected Vehicle Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"MDHFBUK13U0062837\";",
											"",
											"//check the operation code",
											"tests[\"Check Expected operation code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"TESTCODE1\";",
											"",
											"",
											"//check the operation totals",
											"tests[\"Check Expected operation total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"500.0\";"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85fccdd4-c1ba-471b-a37c-64d874b6020c",
										"exec": [
											"Authorization = pm.environment.get(\"NISSProvider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									},
									{
										"key": "username",
										"value": "ssmaqa.sandbox.nissan1a@ifmqa.com.au",
										"type": "text"
									},
									{
										"key": "dealerId",
										"value": "IFMAQA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissCustomOperation_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate Nissan Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ba6c2a2-41fc-49b6-aeb2-879813ac6925",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//set Nissan Client account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let NISSClient_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"NISSClient_token\", NISSClient_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "username",
										"value": "st.qa.nissan.eu1@ifm.com"
									},
									{
										"key": "password",
										"value": "cBuCtrE"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISSClient_username}}&password={{NISSClient_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISSClient_username}}"
										},
										{
											"key": "password",
											"value": "{{NISSClient_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/SSM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcaaa7d2-c47e-4d3e-9e65-49bba66642e3",
										"exec": [
											"Authorization = pm.environment.get(\"NISSClient_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "351a6345-d697-40bd-8662-06f3602dc364",
										"exec": [
											"//Set a 5 second delay to negate lag after authorising provider",
											"setTimeout(function(){}, 5000);",
											"",
											"//pm.test(\"Status code is 200\", function(){",
											"//    pm.response.to.have.status(200);",
											"//});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/html"
									},
									{
										"key": "Accept",
										"value": "text/html"
									},
									{
										"key": "Content-Transfer-Encoding",
										"value": "application/gzip"
									}
								],
								"url": {
									"raw": "https://api-sandbox.superservice.com/v1/nissan-order/SSM?basketID=5ad93614e4b07d3320b3d7e7",
									"protocol": "https",
									"host": [
										"api-sandbox",
										"superservice",
										"com"
									],
									"path": [
										"v1",
										"nissan-order",
										"SSM"
									],
									"query": [
										{
											"key": "basketID",
											"value": "5ad93614e4b07d3320b3d7e7"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "795bd574-b431-4e53-95d8-cce2e4e9ac42",
								"type": "text/javascript",
								"exec": [
									"Authorization = pm.environment.get(\"NISSProvider_token\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9806ee9b-7716-4aae-ad2b-09e5198091c6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Generic Vehicle",
					"item": [
						{
							"name": "Generic: Authorise Nissan Order API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be1c9645-85ed-4ba0-93b8-f4335e3d7b31",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//set Nissan Client account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let NISSClient_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"NISSClient_token\", NISSClient_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISSClient_username}}&password={{NISSClient_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISSClient_username}}"
										},
										{
											"key": "password",
											"value": "{{NISSClient_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generic: Datapak - model/get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e54b8c1e-c461-40fa-b616-29763ebaca78",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"// test total price of operation",
											"pm.test(\"Check modelId, familyCode, modelCode\", function () {",
											"    pm.expect(jsonData.modelId).to.eql(70212);",
											"    pm.expect(jsonData.familyCode).to.eql(\"Z99Z\");",
											"});  ",
											"",
											" //check discount for labour rate",
											"pm.test(\"Test attributes in this response\", function () {",
											"    pm.expect(jsonData.attributes[0].description).to.eql(\"Model Code\");",
											"    pm.expect(jsonData.attributes[0].value).to.eql(\"ZZZZZZZZZZZZZ\");",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/datapak/model/get?modelId=70212&market=NL&subscriptionAssignment={{NISSClient_subId}}&locale=en-gb",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"datapak",
										"model",
										"get"
									],
									"query": [
										{
											"key": "modelId",
											"value": "70212"
										},
										{
											"key": "market",
											"value": "NL"
										},
										{
											"key": "subscriptionAssignment",
											"value": "{{NISSClient_subId}}"
										},
										{
											"key": "locale",
											"value": "en-gb"
										}
									]
								},
								"description": "Check that generic vehicle returns with Datapak - operation/get"
							},
							"response": []
						},
						{
							"name": "Generic: Datapak - operation/get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38e67600-5bd7-4480-81d0-9f3f87b8505a",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"// test total price of operation",
											"pm.test(\"Test total technical price of operation 70212/GENERICOP1\", function () {",
											"    ",
											"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
											"    //check total technical price",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(131.85);",
											"});  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/datapak/operation/get?modelId=70212&id=5bac4fb87a69603cc109a638&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=AAAAAAAAAA1234567&pricingMode=Technical&market=NL&subscriptionAssignment={{NISSClient_subId}}&locale=en-gb",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"datapak",
										"operation",
										"get"
									],
									"query": [
										{
											"key": "modelId",
											"value": "70212"
										},
										{
											"key": "id",
											"value": "5bac4fb87a69603cc109a638"
										},
										{
											"key": "operationSource",
											"value": "Manufacturer"
										},
										{
											"key": "applyBundle",
											"value": "yes"
										},
										{
											"key": "applySubstitutions",
											"value": "yes"
										},
										{
											"key": "showSubstitutionDetails",
											"value": "no"
										},
										{
											"key": "vin",
											"value": "AAAAAAAAAA1234567"
										},
										{
											"key": "pricingMode",
											"value": "Technical"
										},
										{
											"key": "market",
											"value": "NL"
										},
										{
											"key": "subscriptionAssignment",
											"value": "{{NISSClient_subId}}"
										},
										{
											"key": "locale",
											"value": "en-gb"
										}
									]
								},
								"description": "Check that generic vehicle returns with Datapak - operation/get"
							},
							"response": []
						},
						{
							"name": "Generic: Datapak - operation/getByCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc29f557-5cf4-4815-8a41-274540698cc5",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"// test total price of operation",
											"pm.test(\"Test total technical price of operation 70212/GENERICOP1\", function () {",
											"    ",
											"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
											"    //check total technical price",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(131.85);",
											"});  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=GENERICOP1&modelId=70212&vin=AAAAAAAAAA1234567&pricingMode=Technical&showSubstitutionDetails=no&market=NL&subscriptionAssignment={{NISSClient_subId}}&locale=en-gb",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"datapak",
										"operation",
										"getByCode"
									],
									"query": [
										{
											"key": "operationCode",
											"value": "GENERICOP1"
										},
										{
											"key": "modelId",
											"value": "70212"
										},
										{
											"key": "vin",
											"value": "AAAAAAAAAA1234567"
										},
										{
											"key": "pricingMode",
											"value": "Technical"
										},
										{
											"key": "showSubstitutionDetails",
											"value": "no"
										},
										{
											"key": "market",
											"value": "NL"
										},
										{
											"key": "subscriptionAssignment",
											"value": "{{NISSClient_subId}}"
										},
										{
											"key": "locale",
											"value": "en-gb"
										}
									]
								},
								"description": "Check that generic vehicle returns with Datapak - operation/get"
							},
							"response": []
						},
						{
							"name": "Generic: Datapak - operation/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "174dbe2a-e4b2-4948-8c42-f72e5a5697a5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test operation/list function returns correctly\", function () {",
											"    ",
											"    pm.expect(jsonData.operations[0].operation.code).to.eql(\"GENERICOP1\");",
											"    pm.expect(jsonData.operations[0].operation.description).to.eql(\"Generic Operation 1\");",
											"    pm.expect(jsonData.operations[0].operation.operationSource).to.eql(\"OperationAuthoring\");",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/datapak/operation/list?modelId=70212&categoryId=CCNGEN1&sectionId=CSNGEN1&vin=AAAAAAAAAA1234567&market=NL&subscriptionAssignment={{NISSClient_subId}}&locale=en-gb",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"datapak",
										"operation",
										"list"
									],
									"query": [
										{
											"key": "modelId",
											"value": "70212"
										},
										{
											"key": "categoryId",
											"value": "CCNGEN1"
										},
										{
											"key": "sectionId",
											"value": "CSNGEN1"
										},
										{
											"key": "vin",
											"value": "AAAAAAAAAA1234567"
										},
										{
											"key": "market",
											"value": "NL"
										},
										{
											"key": "subscriptionAssignment",
											"value": "{{NISSClient_subId}}"
										},
										{
											"key": "locale",
											"value": "en-gb"
										}
									]
								},
								"description": "Check that generic vehicle returns with Datapak - operation/get"
							},
							"response": []
						},
						{
							"name": "Generic: Datapak - operation/search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d77d9ea8-3459-4fee-9726-a8af7aa05a3b",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test operation/list function returns correctly\", function () {",
											"    ",
											"    pm.expect(jsonData.operations[0].operation.code).to.eql(\"GENERICOP1\");",
											"    pm.expect(jsonData.operations[0].operation.description).to.eql(\"Generic Operation 1\");",
											"    pm.expect(jsonData.operations[0].operation.operationSource).to.eql(\"OperationAuthoring\");",
											"    pm.expect(jsonData.operations[0].menus[0].description).to.eql(\"Generic Operation 1\");",
											"});  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/datapak/operation/search?modelId=70212&type=description&term=Generic&market=NL&subscriptionAssignment={{NISSClient_subId}}&locale=en-gb",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"datapak",
										"operation",
										"search"
									],
									"query": [
										{
											"key": "modelId",
											"value": "70212"
										},
										{
											"key": "type",
											"value": "description"
										},
										{
											"key": "term",
											"value": "Generic"
										},
										{
											"key": "market",
											"value": "NL"
										},
										{
											"key": "subscriptionAssignment",
											"value": "{{NISSClient_subId}}"
										},
										{
											"key": "locale",
											"value": "en-gb"
										}
									]
								},
								"description": "Check that generic vehicle returns with Datapak - operation/get"
							},
							"response": []
						},
						{
							"name": "Generic: OrderAPI - Send order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2135c488-e486-4c8f-9cf8-1e5103dab708",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let nissGeneric_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"nissGeneric_quoteID\", nissGeneric_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"vehicles\": [\r\n    {\r\n      \"description\": \"Generic Model\",\r\n      \"vin\": \"AAAAAAAAAA1010101\",\r\n      \"odometer\": 125000,\r\n      \"modelCode\": \"ZZZZZZZZZZZZZ\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"5bac4fb87a69603cc109a638\",\r\n      \"code\": \"GENERICOP1\",\r\n      \"description\": \"Generic Operation 1\",\r\n      \"variantDescription\": \"Generic Operation 1\",\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"Nissan NL fixed rate\",\r\n              \"amount\": 71.76\r\n            }\r\n          ],\r\n\t\t  \"priceLevelCode\": \"Nissan NL fixed rate\",\r\n          \"taxes\": [\r\n            \"BTW\"\r\n          ],\r\n          \"totals\": {\r\n            \"extendedPrice\": 71.76,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 71.76,\r\n            \"taxes\": [\r\n              {\r\n                \"code\": \"BTW\",\r\n                \"amount\": 14.35\r\n              }\r\n            ],\r\n            \"total\": 86.11\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"1234567890\"\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"165464BA1A\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"AIR CLEANER ELE\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"DLR\",\r\n                \"amount\": 17.17\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"DLR\",\r\n            \"taxes\": [\r\n              \"BTW\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 17.17,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 17.17,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"BTW\",\r\n                  \"amount\": 3.43\r\n                }\r\n              ],\r\n              \"total\": 20.6\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"partFamily\": \"E11\"\r\n          }\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"3486\",\r\n          \"code\": \"BF\",\r\n          \"description\": \"Brake Fluid\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"Nissan NL fixed rate\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n\t\t\t\"priceLevelCode\": \"Nissan NL fixed rate\",\r\n            \"taxes\": [\r\n              \"BTW\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 20,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"BTW\",\r\n                  \"amount\": 4\r\n                }\r\n              ],\r\n              \"total\": 24\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"totals\": {\r\n        \"subtotals\": {\r\n          \"labour\": 71.76,\r\n          \"parts\": 17.17,\r\n          \"sundries\": 20,\r\n          \"adjustments\": 0\r\n        },\r\n        \"totalExTax\": 108.93,\r\n        \"taxes\": [\r\n          {\r\n            \"code\": \"BTW\",\r\n            \"amount\": 21.79\r\n          }\r\n        ],\r\n        \"total\": 130.71\r\n      },\r\n      \"references\": {\r\n        \"modelId\": \"70212\",\r\n        \"familyCode\": \"Z99Z\",\r\n        \"isCustomOperation\": \"true\",\r\n        \"operationCodeId\": \"97366822\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\"\r\n      },\r\n      \"hasRecommendations\": false\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    },\r\n    {\r\n      \"code\": \"BTW\",\r\n      \"percentage\": 20\r\n    }\r\n  ],\r\n  \"isoCurrencyCode\": \"AUD\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generic: OrderAPI - Retrieve order with generic vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e9165ea-abb7-41fe-9656-99e9874cc406",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Vehicle details return correctly in sent order\", function () {",
											"    pm.expect(jsonData.vehicles[0].description).to.eql(\"Generic Model\");",
											"    pm.expect(jsonData.vehicles[0].vin).to.eql(\"AAAAAAAAAA1010101\");",
											"    pm.expect(jsonData.vehicles[0].odometer).to.eql(125000);",
											"});",
											"",
											"",
											"pm.test(\"Operation details return correctly in sent order\", function () {",
											"    pm.expect(jsonData.operations[0].code).to.eql(\"GENERICOP1\");",
											"    pm.expect(jsonData.operations[0].description).to.eql(\"Generic Operation 1\");",
											"    pm.expect(jsonData.operations[0].parts[0].number).to.eql(\"165464BA1A\");",
											"});",
											"",
											"",
											"pm.test(\"Totals return correctly in sent order\", function () {",
											"    pm.expect(jsonData.totals.subtotals.labour).to.eql(71.76);",
											"    pm.expect(jsonData.totals.subtotals.parts).to.eql(17.17);",
											"    pm.expect(jsonData.totals.subtotals.sundries).to.eql(20);",
											"    pm.expect(jsonData.totals.total).to.eql(130.71);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{nissGeneric_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{nissGeneric_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generic: NissanOrderAPI - Retrieve Order with operation details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03f5c2d4-7e7f-435a-8eac-1318d7e06b45",
										"exec": [
											"Authorization = pm.environment.get(\"NISSClient_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7c40ec05-110a-4b3f-9e61-d60a2ad8b360",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//convert xml response to json",
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Check Expected Vehicle Model\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.VechileData.Model === \"AAAAAAAAAA1010101\";",
											"",
											"tests[\"Check Expected Operation Code\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.OperationCode === \"GENERICOP1\";",
											"",
											"tests[\"Check Expected Operation Total\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.JobCostSubTotalincVAT === \"130.71\";",
											"",
											"tests[\"Check FRS Code returns in first operation object\"] = jsonObject['soapenv:Envelope']['soapenv:Body'].Quotation_resultResponse.Quotation_resultResult.Jobs.job.operations.Operation[0].FRScodes.FRScode.FRScode.includes(\"1234567890\") === true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"name": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "username",
										"value": "st.qa.nissan.eu1@ifm.com"
									},
									{
										"key": "dealerId",
										"value": "IFMQA123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dms=\"http://eu.nissan.biz/DMSinterface\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<dms:Quotation_result>\r\n<!-- put quote ID here to retrieve order, add operations to quote before retrieving -->\r\n<dms:BasketID>{{nissGeneric_quoteID}}</dms:BasketID>\r\n</dms:Quotation_result>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "{{url}}/v1/nissan-order/DMS_service",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-order",
										"DMS_service"
									]
								}
							},
							"response": []
						}
					],
					"description": "Generic Vehicle",
					"_postman_isSubFolder": true
				},
				{
					"name": "Nissan Service Operation API",
					"item": [
						{
							"name": "Authenticate Nissan Client (Dealer) account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fae75ed-ffdc-4b23-877e-4b4da93a5ff3",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//set Nissan Provider account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let nissSOclient_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"nissSOclient_token\", nissSOclient_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISS_SO_client}}&password={{NISS_SO_client_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISS_SO_client}}"
										},
										{
											"key": "password",
											"value": "{{NISS_SO_client_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return list of  scheduled operations >60k",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cbe4bcf-ba2d-4592-956a-351c01a68a57",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test return list of scheduled operations\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    //check return scheduled operations > 60k",
											"    pm.expect(jsonData.operations[0].code).to.eql(\"S90KMNE\");",
											"    pm.expect(jsonData.operations[1].code).to.eql(\"S120KMNE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df5a9b6f-cbda-4dca-a030-9eb47d0440f9",
										"exec": [
											"Authorization = pm.environment.get(\"nissSOclient_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/service-operation/list?vin=SJNFAAJ11U1000347&filter=Scheduled&filterValue=60000&dealerId=NL",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"service-operation",
										"list"
									],
									"query": [
										{
											"key": "vin",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "filter",
											"value": "Scheduled"
										},
										{
											"key": "filterValue",
											"value": "60000"
										},
										{
											"key": "dealerId",
											"value": "NL\n",
											"description": "Can login to client account to verify dealerID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate Nissan Provider account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42ff5b62-ca7b-43ed-88d7-926de8d272d7",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//set Nissan Provider account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let nissSOprovider_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"nissSOprovider_token\", nissSOprovider_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{NISS_SO_provider}}&password={{NISS_SO_provider_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{NISS_SO_provider}}"
										},
										{
											"key": "password",
											"value": "{{NISS_SO_provider_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return specific operation (S90KMNE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "633cf66b-8ccc-4d3a-83dc-7f1e5586211a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//total commercial price may different if user changes any configuration for the provider account",
											"pm.test(\"test return service operation S90KMNE\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.operations[0].code).to.eql(\"S90KMNE\");",
											"    pm.expect(jsonData.operations[0].totals.total).to.eql(96);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2d417e5-7ba8-4a59-bee0-d42b4c77c935",
										"exec": [
											"Authorization = pm.environment.get(\"nissSOprovider_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/service-operation/get?vin=SJNFAAJ11U1000347&operationCode=S90KMNE&dealerId=NL",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"service-operation",
										"get"
									],
									"query": [
										{
											"key": "vin",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "operationCode",
											"value": "S90KMNE"
										},
										{
											"key": "dealerId",
											"value": "NL"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b70af895-4cd5-4923-9bd3-d123f4e23c9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ce3e7e5-c406-47c8-9236-1f85c1d05419",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Nissan OSB API",
					"item": [
						{
							"name": "Nissan >/model/search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb53664-649e-4f8f-ab01-3afd43e669ff",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that correct model is returnning for provided VIN\", function () {",
											"pm.expect(jsonData.models[0].modelId).to.eql(56677);",
											"pm.expect(jsonData.models[0].familyCode).to.eql(\"J11A\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/nissan-osb/model/search?term=SJNFAAJ11U1000347&type=vin&countryCode=NL&externalSystemCode=OSB&externalSystemId=AQATest",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-osb",
										"model",
										"search"
									],
									"query": [
										{
											"key": "term",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "type",
											"value": "vin"
										},
										{
											"key": "countryCode",
											"value": "NL"
										},
										{
											"key": "externalSystemCode",
											"value": "OSB"
										},
										{
											"key": "externalSystemId",
											"value": "AQATest\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan ->/operation/getByCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9207d-d58c-4953-8042-36d700cd1f6b",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that return a list of menus for provided VIN\", function () {",
											"pm.expect(jsonData.operations[0].code).to.eql(\"S30KMNE\");",
											"pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(260);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/nissan-osb/operation/getByCode?operationCode=S30KMNE&modelId=56677&term=SJNFAAJ11U1000347&type=vin&countryCode=NL&externalSystemCode=OSB&externalSystemId=AQATest",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-osb",
										"operation",
										"getByCode"
									],
									"query": [
										{
											"key": "operationCode",
											"value": "S30KMNE"
										},
										{
											"key": "modelId",
											"value": "56677"
										},
										{
											"key": "term",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "type",
											"value": "vin"
										},
										{
											"key": "countryCode",
											"value": "NL"
										},
										{
											"key": "externalSystemCode",
											"value": "OSB"
										},
										{
											"key": "externalSystemId",
											"value": "AQATest\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan ->/operation/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee2a1a4-486e-442b-bc2c-36fe9a2f7520",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that return a list of operation for provided VIN, and filtered by categoryId and sectionId\", function () {",
											"    //The first operation on the response list",
											"pm.expect(jsonData.operations[0].operation.code).to.eql(\"S30KMNE\");",
											"pm.expect(jsonData.operations[0].operation.description).to.eql(\"Carry out 30,000 km maintenance\");",
											"",
											"    //The second operation on the response list",
											"pm.expect(jsonData.operations[1].operation.code).to.eql(\"S60KMNE\");",
											"pm.expect(jsonData.operations[1].operation.description).to.eql(\"Carry out 60,000 km maintenance\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/nissan-osb/operation/list?modelId=56677&categoryId=2844&sectionId=KA&term=SJNFAAJ11U1000347&type=vin&countryCode=NL&externalSystemCode=OSB&externalSystemId=AQATest",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-osb",
										"operation",
										"list"
									],
									"query": [
										{
											"key": "modelId",
											"value": "56677"
										},
										{
											"key": "categoryId",
											"value": "2844"
										},
										{
											"key": "sectionId",
											"value": "KA"
										},
										{
											"key": "term",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "type",
											"value": "vin"
										},
										{
											"key": "countryCode",
											"value": "NL"
										},
										{
											"key": "externalSystemCode",
											"value": "OSB"
										},
										{
											"key": "externalSystemId",
											"value": "AQATest\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan ->/operation/listCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b523a6a7-a3ae-4a13-b034-06b09213952f",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that return a list of categories for provided VIN\", function () {",
											"pm.expect(jsonData.categories[0].categoryId).to.eql(\"2841\");",
											"pm.expect(jsonData.categories[1].categoryId).to.eql(\"2843\");",
											"pm.expect(jsonData.categories[2].categoryId).to.eql(\"2844\");",
											"",
											"//Test custom category is returning",
											"pm.expect(jsonData.categories[9].categoryId).to.eql(\"CCNAQATEST\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/nissan-osb/operation/listCategories?modelId=56677&term=SJNFAAJ11U1000347&type=vin&countryCode=NL&externalSystemCode=OSB&externalSystemId=AQATest",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-osb",
										"operation",
										"listCategories"
									],
									"query": [
										{
											"key": "modelId",
											"value": "56677"
										},
										{
											"key": "term",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "type",
											"value": "vin"
										},
										{
											"key": "countryCode",
											"value": "NL"
										},
										{
											"key": "externalSystemCode",
											"value": "OSB"
										},
										{
											"key": "externalSystemId",
											"value": "AQATest\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nissan ->/operation/listSections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "869f50f3-b2b7-4304-ba4a-a6ebb4cbb5b9",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that return a list of sections for provided VIN and category Id\", function () {",
											"pm.expect(jsonData.sections[0].sectionId).to.eql(\"00\");",
											"pm.expect(jsonData.sections[1].sectionId).to.eql(\"KA\");",
											"pm.expect(jsonData.sections[2].sectionId).to.eql(\"KB\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/nissan-osb/operation/listSections?modelId=56677&categoryId=2844&term=SJNFAAJ11U1000347&type=vin&countryCode=NL&externalSystemCode=OSB&externalSystemId=AQATest",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"nissan-osb",
										"operation",
										"listSections"
									],
									"query": [
										{
											"key": "modelId",
											"value": "56677"
										},
										{
											"key": "categoryId",
											"value": "2844"
										},
										{
											"key": "term",
											"value": "SJNFAAJ11U1000347"
										},
										{
											"key": "type",
											"value": "vin"
										},
										{
											"key": "countryCode",
											"value": "NL"
										},
										{
											"key": "externalSystemCode",
											"value": "OSB"
										},
										{
											"key": "externalSystemId",
											"value": "AQATest\n"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "This is to test collection of API requests for Nissan account on Sandbox",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f812100e-e284-49b3-a542-80a951e4f487",
						"type": "text/javascript",
						"exec": [
							"Authorization = pm.environment.get(\"NISS_token\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f172cd6-7265-49f3-939f-a2905043c0c5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Toyota",
			"item": [
				{
					"name": "Authorisation API",
					"item": [
						{
							"name": "Authorise Toyota dealer user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ddc83fe-f8b3-4381-9d81-f6aba460aff0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Access Token has been generated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");",
											"});",
											"//set Toyota account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let TOYO_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"TOYO_token\", TOYO_token);",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{TOYO_username}}&password={{TOYO_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{TOYO_username}}"
										},
										{
											"key": "password",
											"value": "{{TOYO_password}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "This method primarily is used to create an \"Access Token\", which can be used to make authorized calls to any other Superservice API.To make an authorized call to the Superservice API, you will need to include the Access Token in the \"Authorization\" header (or cookie)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b4aa9dd5-e3a4-4a8c-9375-eb102f5b7ed9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f83699-8670-46be-8ba2-c96d75c28438",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Datapak API",
					"item": [
						{
							"name": "Utility Services",
							"item": [
								{
									"name": "Check locale",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bf51d0d-d7a6-43ed-83bf-3d2b409ba74c",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check fr-fr locale for the dealer\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check the part price level name",
													"    pm.expect(jsonData.locales[16].locale).to.eql(\"fr-fr\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "669d2571-27e7-41e3-ad62-6442487a0e83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/utility/listLocales",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"utility",
												"listLocales"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check list of subscriptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c2ec249-2a3f-4b2a-b069-8d43821444b5",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check subscription for the dealer\", function () {",
													"    var jsonData = pm.response.json();",
													"    let subscriptionId = pm.environment.get(\"TOYO_subscriptionAssignment\") ",
													"    pm.expect(jsonData.subscriptions[0].assignmentId).to.eql(subscriptionId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/utility/listSubscriptions",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"utility",
												"listSubscriptions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check refresh rates for the dealer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "677bc242-420b-4b3d-9661-361baf9361e0",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check refresh rates for the dealer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.result).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/utility/refreshRates",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"utility",
												"refreshRates"
											]
										}
									},
									"response": []
								}
							],
							"description": "Check the user unility services when accessing the Datapak API services",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e1d51ad-a8a2-4469-93af-293b40fe082b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b68d4174-8eb1-430b-9eb2-cd26c2d58b07",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Menu Price Setting Services",
							"item": [
								{
									"name": "Check Labour Rate settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba347664-b815-42dd-b29e-442f8fb25e5c",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check dealer labour rate settings\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check the labour rate name",
													"    pm.expect(jsonData[0].name).to.eql(\"nsclbr\");",
													"    //check tax rate of labour",
													"    pm.expect(jsonData[0].taxRate).to.eql(\"5aa88e82e4b0dc99ca8af6a6\");",
													"    //check tax rate of sundry",
													"    pm.expect(jsonData[0].sundryTaxRate).to.eql(\"5aa88e82e4b0dc99ca8af6a6\");",
													"    //check labour rate",
													"    pm.expect(jsonData[0].labourHours[0].rate).to.eql(8000);",
													"    //Check default franchise market",
													"    pm.expect(jsonData[0].defaultFranchiseMarket.franchise).to.eql(\"TOYO\");",
													"    pm.expect(jsonData[0].defaultFranchiseMarket.market).to.eql(\"FR\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/menupricesetting/getLabourRateSettings?userLevel=Dealer&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"menupricesetting",
												"getLabourRateSettings"
											],
											"query": [
												{
													"key": "userLevel",
													"value": "Dealer"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Part Price Levels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "debf300a-bfa1-43f4-9a8d-4f1eda04e9e3",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check dealer part price levels\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check the part price level name",
													"    pm.expect(jsonData[0].name).to.eql(\"Retail TOYO FR\");",
													"    //check base price level",
													"    pm.expect(jsonData[0].basePriceLevel).to.eql(\"price0\");",
													"    //check manufacturePartLevel",
													"    pm.expect(jsonData[0].properties.manufacturerPartLevel).to.eql(\"true\");",
													"    //Check default franchise market",
													"    pm.expect(jsonData[0].defaultFranchiseMarket.franchise).to.eql(\"TOYO\");",
													"    pm.expect(jsonData[0].defaultFranchiseMarket.market).to.eql(\"FR\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/menupricesetting/getPartPriceLevels?userLevel=Dealer&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"menupricesetting",
												"getPartPriceLevels"
											],
											"query": [
												{
													"key": "userLevel",
													"value": "Dealer"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Check SSMv2 price settings",
							"_postman_isSubFolder": true
						},
						{
							"name": "Operation Services",
							"item": [
								{
									"name": "Check Ops details(/operation/get)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2b56723-5042-4e32-a6ec-7dd48dcbc587",
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "955f2c52-4e54-4956-893d-16bc2c0fbcc3",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"    var jsonData = pm.response.json();",
													"pm.test(\"test list of menusId are returned\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].id).to.eql(\"36556410\");//operation code: 002119",
													"    pm.expect(jsonData.operations[1].id).to.eql(\"36731756\");//operation code: 0C4A93",
													"    pm.expect(jsonData.operations[2].id).to.eql(\"37999279\");//operation code: RBDFP",
													"});",
													"",
													"pm.test(\"test total price of each menus\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(67.76);",
													"    pm.expect(jsonData.operations[1].pricingMethod.amount).to.eql(92.4);",
													"    pm.expect(jsonData.operations[2].pricingMethod.amount).to.eql(406);",
													"});",
													"",
													"//Test Author rule item bundle",
													"pm.test(\"test Item Bundle for menus 36731756\", function () {",
													"    ",
													"    pm.expect(jsonData.itemBundles[0].name).to.eql(\"AQATEST\");",
													"    pm.expect(jsonData.itemBundles[0].referenceMenuId).to.eql(\"36731756\");",
													"    pm.expect(jsonData.itemBundles[0].operation.id).to.eql(\"36556412\");",
													"    ",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/get?modelId=41976&id=36556410,36731756,37999279&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=yes&vin=SB1KN3JE00E022237&pricingMode=Technical&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "41976"
												},
												{
													"key": "id",
													"value": "36556410,36731756,37999279"
												},
												{
													"key": "operationSource",
													"value": "Manufacturer"
												},
												{
													"key": "applyBundle",
													"value": "yes"
												},
												{
													"key": "applySubstitutions",
													"value": "yes"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "yes"
												},
												{
													"key": "categoryId",
													"value": null,
													"disabled": true
												},
												{
													"key": "sectionId",
													"value": null,
													"disabled": true
												},
												{
													"key": "vin",
													"value": "SB1KN3JE00E022237"
												},
												{
													"key": "labourRateId",
													"value": null,
													"disabled": true
												},
												{
													"key": "partPriceRateId",
													"value": null,
													"disabled": true
												},
												{
													"key": "operationCodeId",
													"value": null,
													"disabled": true
												},
												{
													"key": "customerType",
													"value": "Fleet",
													"disabled": true
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Op technical price(/operation/getByCode)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "385ce117-3a4b-4705-bc51-a0f13b66dbc9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80e6fda2-af41-4bc2-a485-1e59a5d91c66",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"test total technical price of operation 48175/0C4C53\", function () {",
													"    ",
													"    //pm.expect(jsonData.isoCurrencyCode).to.eql(\"EUR\");",
													"    //pm.expect(jsonData.operations[0].totals.total).to.eql(198.38);",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(128.88);",
													"    //check discount for labour rate",
													"    //pm.expect(jsonData.operations[0].labour.pricing.adjustmentPercentage).to.eql(7);",
													"    //check labour time adjustment, standardTime 1.2",
													"    pm.expect(jsonData.operations[0].labour.times[0].code).to.eql(\"standardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[0].quantity).to.eql(0.4);",
													"});",
													"",
													"//check tax rates for labour, parts pricing and sundries",
													"pm.test(\"test tax rate for labour, parts price and sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.taxes[0]).to.eql(\"TAX\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.taxes[0]).to.eql(\"TAX\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.taxes[0]).to.eql(\"TAX\");",
													"    ",
													"});",
													"",
													"//Check labour, sundries rate and parts pricing",
													"pm.test(\"test labour, sundries rate and parts pricing\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].code).to.eql(\"nsclbr\");",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].amount).to.eql(80);",
													"    ",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].code).to.eql(\"RTL\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].amount).to.eql(16.89);",
													"    ",
													"    pm.expect(jsonData.operations[0].sundries[1].pricing.priceLevels[0].code).to.eql(\"nsclbr\");",
													"    pm.expect(jsonData.operations[0].sundries[1].pricing.priceLevels[0].amount).to.eql(20); ",
													"});",
													"",
													"//Test Author rule sundry substitution",
													"pm.test(\"test sundry is substituted by a part\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].sundries[0].code).to.eql(\"0888083590\");",
													"    pm.expect(jsonData.operations[0].sundries[0].partCapacity).to.eql(100000);",
													"    pm.expect(jsonData.operations[0].sundries[0].calculatedPartQuantity).to.eql(0);",
													"   ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=0C4C53&modelId=48175&pricingMode=Technical&showSubstitutionDetails=yes&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "0C4C53"
												},
												{
													"key": "modelId",
													"value": "48175"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "yes"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Op OE commercial price(/operation/getByCode)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40c72de8-e740-41c3-891c-3031349bbb7c",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"// check Author price rounding rule",
													"pm.test(\"test price rounding rule applied to commerical price\", function () {",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(139.99);",
													"    //check total exclude tax price",
													"    pm.expect(jsonData.operations[0].totals.totalExTax).to.eql(127.26);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ebdd92e-b51c-475a-ba6b-43bac9d4f553",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=0C4C53&modelId=48175&pricingMode=OE&showSubstitutionDetails=no&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-au",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "0C4C53"
												},
												{
													"key": "modelId",
													"value": "48175"
												},
												{
													"key": "pricingMode",
													"value": "OE"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-au\n"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Check operation services when accessing to Datapak APIs",
							"_postman_isSubFolder": true
						},
						{
							"name": "Model Services",
							"item": [
								{
									"name": "Check individual model (/model/get)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4669ab7f-0b25-4c8e-83b0-a351fb348f4f",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check return an individual model\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check return model ID",
													"    pm.expect(jsonData.modelId).to.eql(48175);",
													"    //check return family code",
													"    pm.expect(jsonData.familyCode).to.eql(\"KGB40L\");",
													"    //check return vehicleCategories info",
													"    pm.expect(jsonData.vehicleCategories[4].code).to.eql(\"AYGO2014\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/get?modelId=48175&include=VehicleCategory&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "48175"
												},
												{
													"key": "include",
													"value": "VehicleCategory"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "This method will return an individual model"
									},
									"response": []
								},
								{
									"name": "Check return a list of model series (/model/listSeries)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "398e6c6e-5612-44c9-8d17-983325e29b93",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check return a list of model series\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check return family code",
													"    pm.expect(jsonData.familyCode).to.eql(\"PAB40R\");",
													"    //check return family code",
													"    pm.expect(jsonData.series[0].attributes[2].value).to.eql(\"AHMGKW\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/listSeries?familyCode=PAB40R&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"listSeries"
											],
											"query": [
												{
													"key": "familyCode",
													"value": "PAB40R"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "This method will return an individual model"
									},
									"response": []
								},
								{
									"name": "Check return models based on VIN (/mode/search)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb947db7-d185-465a-a170-862b64373075",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Check return a list of models based on the VIN\", function () {",
													"    var jsonData = pm.response.json();",
													"    //check return model ID",
													"    pm.expect(jsonData.models[0].modelId).to.eql(32918);",
													"    //check return family code",
													"    pm.expect(jsonData.models[0].familyCode).to.eql(\"ZRT271L\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/model/search?term=SB1EG76LX0E068969&type=vin&include=VehicleCategory&market=FR&subscriptionAssignment={{TOYO_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"model",
												"search"
											],
											"query": [
												{
													"key": "term",
													"value": "SB1EG76LX0E068969"
												},
												{
													"key": "type",
													"value": "vin"
												},
												{
													"key": "include",
													"value": "VehicleCategory",
													"description": "optional"
												},
												{
													"key": "market",
													"value": "FR"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{TOYO_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "This method will return an individual model"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "This is SSMv2 Datapak APIs used to retrieve operation information",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35dbb4af-2e9e-40ff-906c-6cf69a5b9c29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7db90ce-8c47-4bfb-ba7c-575152a04ff9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Order API",
					"item": [
						{
							"name": "Retrieve quote created in Menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0175367-727e-4875-9e96-1d87884ca77d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the quote ",
											"pm.test(\"test total price of the quote created in SSMv2\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(319.46);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{TOYO_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{TOYO_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #6 - Create technically priced quote (SSM Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43494685-f50c-4489-bbdd-e9ccda79e895",
										"type": "text/javascript",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Standard)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"",
											"pm.test(\"Quote ID has been created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let toyoTechnical_quoteID = jsonData.id;",
											"pm.environment.set(\"toyoTechnical_quoteID\", toyoTechnical_quoteID);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"id\": \"5aa9b966e4b0dc99ca8b07bc\",\r\n    \"taxSetting\": {}\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5aa9b8f5e4b0dc99ca8b07b2\",\r\n      \"description\": \"Aygo LEDIN 5DR Hatchback 1.0L 3 Cyl 5sp Manual\",\r\n      \"vin\": \"JTDKG12C50N691739\",\r\n      \"registration\": \"8KFX35\",\r\n      \"transmissionCode\": \"5F\",\r\n      \"engineCode\": \"1KRFE\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"068\",\r\n      \"modelCode\": \"KGB10L - AHMRKW\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"37995972\",\r\n      \"code\": \"RBDFP\",\r\n      \"pricingMethod\": {\r\n        \"method\": \"Standard\"\r\n      },\r\n      \"description\": \"RBDFP: Replace both front disc brake rotors & brake pads.\",\r\n      \"variantDescription\": \"Basic Operation\",\r\n      \"variantType\": \"Other\",\r\n      \"groupVariantId\": 37995972,\r\n      \"variants\": [\r\n        {\r\n          \"id\": \"3999800\",\r\n          \"description\": \"Country Group\",\r\n          \"code\": \"DE,FR,IT,RO\",\r\n          \"type\": \"CountryGroup\"\r\n        }\r\n      ],\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"nsclbr\",\r\n              \"amount\": 80\r\n            }\r\n          ],\r\n      \"priceLevelCode\": \"nsclbr\",\r\n          \"taxes\": [\r\n            \"TAX\"\r\n          ],\r\n          \"totals\": {\r\n            \"extendedPrice\": 80,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 80,\r\n            \"taxes\": [\r\n              {\r\n                \"code\": \"TAX\",\r\n                \"amount\": 8\r\n              }\r\n            ],\r\n            \"total\": 88\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"T1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"473016\"\r\n        }\r\n      ],\r\n      \"invoiceLines\": [\r\n        {\r\n          \"id\": \"2166\",\r\n          \"description\": \"Replace both front disc brake rotors & brake pads.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"7103\",\r\n          \"description\": \"Includes remove & refit wheels & calipers.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"6257\",\r\n          \"description\": \"Carry out final inspection and road test.\",\r\n          \"pricing\": {\r\n            \"totals\": {\r\n              \"extendedPrice\": 0,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 0,\r\n              \"total\": 0\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"044650H031\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"PAD KIT, DISC BRAKE\",\r\n          \"supersession\": {\r\n            \"basePartNumber\": \"044650H020\",\r\n            \"parts\": [\r\n              {\r\n                \"number\": \"044650H030\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, FR DISC\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 85.85\r\n                    },\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 85.85\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 85.85,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 85.85,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 8.59\r\n                      }\r\n                    ],\r\n                    \"total\": 94.44\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H031\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 85.85\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 85.85,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 85.85,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 8.59\r\n                      }\r\n                    ],\r\n                    \"total\": 94.44\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H020\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE, FRONT (MARK JURID 682)\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 124.62\r\n                    },\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 124.62\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 124.62,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 124.62,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 12.46\r\n                      }\r\n                    ],\r\n                    \"total\": 137.08\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H040\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FR\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 65.92\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 65.92,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 65.92,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 6.59\r\n                      }\r\n                    ],\r\n                    \"total\": 72.51\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H020\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FRONT\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 65.92\r\n                    },\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 65.92\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 131.84,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 131.84,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 13.18\r\n                      }\r\n                    ],\r\n                    \"total\": 145.02\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              }\r\n            ],\r\n            \"supersessionTrees\": [\r\n              {\r\n                \"partIndex\": 2,\r\n                \"supersessions\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 0,\r\n                \"supersessions\": [\r\n                  2\r\n                ],\r\n                \"superseded\": [\r\n                  0\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 1,\r\n                \"superseded\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"\",\r\n                \"supersessionDescription\": \"\"\r\n              }\r\n            ],\r\n            \"treeRootIndex\": 0\r\n          },\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"RTL\",\r\n                \"amount\": 85.85\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"RTL\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 85.85,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 85.85,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 8.59\r\n                }\r\n              ],\r\n              \"total\": 94.44\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"pnc\": \"04465\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"435120H040\",\r\n          \"quantity\": 2,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"DISC, FR\",\r\n          \"supersession\": {\r\n            \"basePartNumber\": \"435120H020\",\r\n            \"parts\": [\r\n              {\r\n                \"number\": \"044650H030\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, FR DISC\",\r\n                \"pricing\": {\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 85.85,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 85.85,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 8.59\r\n                      }\r\n                    ],\r\n                    \"total\": 94.44\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H031\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 85.85\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 85.85,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 85.85,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 8.59\r\n                      }\r\n                    ],\r\n                    \"total\": 94.44\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H020\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE, FRONT (MARK JURID 682)\",\r\n                \"pricing\": {\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 124.62,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 124.62,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 12.46\r\n                      }\r\n                    ],\r\n                    \"total\": 137.08\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H040\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FR\",\r\n                \"pricing\": {\r\n                  \"priceLevels\": [\r\n                    {\r\n                      \"code\": \"RTL\",\r\n                      \"amount\": 65.92\r\n                    }\r\n                  ],\r\n          \"priceLevelCode\": \"RTL\",\r\n                  \"taxes\": [\r\n                    \"TAX\"\r\n                  ],\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 131.84,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 131.84,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 13.18\r\n                      }\r\n                    ],\r\n                    \"total\": 145.02\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H020\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FRONT\",\r\n                \"pricing\": {\r\n                  \"totals\": {\r\n                    \"extendedPrice\": 131.84,\r\n                    \"adjustment\": 0,\r\n                    \"totalExTax\": 131.84,\r\n                    \"taxes\": [\r\n                      {\r\n                        \"code\": \"TAX\",\r\n                        \"amount\": 13.18\r\n                      }\r\n                    ],\r\n                    \"total\": 145.02\r\n                  }\r\n                },\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              }\r\n            ],\r\n            \"supersessionTrees\": [\r\n              {\r\n                \"partIndex\": 4,\r\n                \"supersessions\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 3,\r\n                \"superseded\": [\r\n                  0\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"\",\r\n                \"supersessionDescription\": \"\"\r\n              }\r\n            ],\r\n            \"treeRootIndex\": 0\r\n          },\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"RTL\",\r\n                \"amount\": 65.92\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"RTL\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 131.84,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 131.84,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 13.18\r\n                }\r\n              ],\r\n              \"total\": 145.02\r\n            }\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"pnc\": \"43512\"\r\n          }\r\n        }\r\n      ],\r\n      \"references\": {\r\n        \"modelId\": \"34429\",\r\n        \"familyCode\": \"KGB10L\",\r\n        \"operationCodeId\": \"3141\",\r\n        \"variantCountOfOperation\": \"1\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\"\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #6 - Retrieve technically priced quote (SSM Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f803b622-41b9-4dde-bab6-89efa946f9a8",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the quote ",
											"pm.test(\"test total price of technically priced quote created through Order API\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"   //the total technical price is not consistent with the quote created in Menus because there is a known discount issue when create quote through order API",
											"    pm.expect(jsonData.totals.total).to.eql(327.46);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{toyoTechnical_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{toyoTechnical_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #7 - Create commercially priced quote (SSM Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c01328f-5baf-451a-b0a0-af25d73484ec",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Fiexed price + amount + taxes)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Quote ID has been created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let toyoCommercial_quoteID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"toyoCommercial_quoteID\", toyoCommercial_quoteID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"id\": \"5aa9b966e4b0dc99ca8b07bc\",\r\n    \"taxSetting\": {}\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5aa9b8f5e4b0dc99ca8b07b2\",\r\n      \"description\": \"Aygo LEDIN 5DR Hatchback 1.0L 3 Cyl 5sp Manual\",\r\n      \"vin\": \"JTDKG12C50N691739\",\r\n      \"registration\": \"8KFX35\",\r\n      \"transmissionCode\": \"5F\",\r\n      \"engineCode\": \"1KRFE\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"068\",\r\n      \"modelCode\": \"KGB10L - AHMRKW\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"37995972\",\r\n      \"code\": \"RBDFP\",\r\n      \"pricingMethod\": {\r\n        \"method\": \"Fixed\",\r\n        \"amount\": 200,\r\n    \"taxes\": [\r\n    \"TAX\"\r\n      ]\r\n      },\r\n      \"description\": \"RBDFP: Replace both front disc brake rotors & brake pads.\",\r\n      \"variantDescription\": \"Basic Operation\",\r\n      \"variantType\": \"Other\",\r\n      \"groupVariantId\": 37995972,\r\n      \"variants\": [\r\n        {\r\n          \"id\": \"3999800\",\r\n          \"description\": \"Country Group\",\r\n          \"code\": \"DE,FR,IT,RO\",\r\n          \"type\": \"CountryGroup\"\r\n        }\r\n      ],\r\n      \"labour\": {\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 1\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"T1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"473016\"\r\n        }\r\n      ],\r\n      \"invoiceLines\": [\r\n        {\r\n          \"id\": \"2166\",\r\n          \"description\": \"Replace both front disc brake rotors & brake pads.\"\r\n        },\r\n        {\r\n          \"id\": \"7103\",\r\n          \"description\": \"Includes remove & refit wheels & calipers.\"\r\n        },\r\n        {\r\n          \"id\": \"6257\",\r\n          \"description\": \"Carry out final inspection and road test.\"\r\n        }\r\n      ],\r\n      \"parts\": [\r\n        {\r\n          \"number\": \"044650H031\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"PAD KIT, DISC BRAKE\",\r\n          \"supersession\": {\r\n            \"basePartNumber\": \"044650H020\",\r\n            \"parts\": [\r\n              {\r\n                \"number\": \"044650H030\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, FR DISC\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H031\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H020\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE, FRONT (MARK JURID 682)\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H040\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FR\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H020\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FRONT\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              }\r\n            ],\r\n            \"supersessionTrees\": [\r\n              {\r\n                \"partIndex\": 2,\r\n                \"supersessions\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 0,\r\n                \"supersessions\": [\r\n                  2\r\n                ],\r\n                \"superseded\": [\r\n                  0\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 1,\r\n                \"superseded\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"\",\r\n                \"supersessionDescription\": \"\"\r\n              }\r\n            ],\r\n            \"treeRootIndex\": 0\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"pnc\": \"04465\"\r\n          }\r\n        },\r\n        {\r\n          \"number\": \"435120H040\",\r\n          \"quantity\": 2,\r\n          \"quantityUnitOfMeasure\": \"Each\",\r\n          \"description\": \"DISC, FR\",\r\n          \"supersession\": {\r\n            \"basePartNumber\": \"435120H020\",\r\n            \"parts\": [\r\n              {\r\n                \"number\": \"044650H030\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, FR DISC\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H031\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"044650H020\",\r\n                \"quantity\": 1,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"PAD KIT, DISC BRAKE, FRONT (MARK JURID 682)\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"04465\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H040\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FR\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              },\r\n              {\r\n                \"number\": \"435120H020\",\r\n                \"quantity\": 2,\r\n                \"quantityUnitOfMeasure\": \"Each\",\r\n                \"description\": \"DISC, FRONT\",\r\n                \"references\": {\r\n                  \"isPnc\": \"false\",\r\n                  \"pnc\": \"43512\"\r\n                }\r\n              }\r\n            ],\r\n            \"supersessionTrees\": [\r\n              {\r\n                \"partIndex\": 4,\r\n                \"supersessions\": [\r\n                  1\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"SIM\",\r\n                \"supersessionDescription\": \"SIMPLE\"\r\n              },\r\n              {\r\n                \"partIndex\": 3,\r\n                \"superseded\": [\r\n                  0\r\n                ],\r\n                \"supersessionType\": 0,\r\n                \"applicability\": \"\",\r\n                \"supersessionCode\": \"\",\r\n                \"supersessionDescription\": \"\"\r\n              }\r\n            ],\r\n            \"treeRootIndex\": 0\r\n          },\r\n          \"references\": {\r\n            \"isPnc\": \"false\",\r\n            \"pnc\": \"43512\"\r\n          }\r\n        }\r\n      ],\r\n      \"references\": {\r\n        \"modelId\": \"34429\",\r\n        \"familyCode\": \"KGB10L\",\r\n        \"operationCodeId\": \"3141\",\r\n        \"variantCountOfOperation\": \"1\",\r\n        \"hasOE\": \"true\",\r\n        \"hasAlternate\": \"false\",\r\n        \"OECommercialExists\": \"true\"\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #7 - Retrieve commercially priced quote (SSM Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a13667-211c-4469-bb27-a336de5872e3",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the commercially priced quote through Order API",
											"pm.test(\"test total price of created technically priced quote\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(220);",
											"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{toyoCommercial_quoteID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{toyoCommercial_quoteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #8 - Create technically priced quote (Custom Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b31ecc17-0028-44cb-b5bf-e96b142ac220",
										"type": "text/javascript",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Standard)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//put the returning quote ID into environment variable",
											"",
											"pm.test(\"Quote ID has been created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let toyoTechnicalCustomID = jsonData.id;",
											"pm.environment.set(\"toyoTechnicalCustomID\", toyoTechnicalCustomID);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"id\": \"5ae67a08e4b083ef7f3e4d69\",\r\n    \"taxSetting\": {}\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5ae679f4e4b083ef7f3e4d62\",\r\n      \"description\": \"Aygo LEDIN 5DR Hatchback 1.0L 3 Cyl 5sp Manual\",\r\n      \"vin\": \"JTDKG12C50N691739\",\r\n      \"registration\": \"8KFX35\",\r\n      \"transmissionCode\": \"5F\",\r\n      \"engineCode\": \"1KRFE\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"068\",\r\n      \"modelCode\": \"KGB10L - AHMRKW\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"5a7b8fd4e4b053bf92417fe7\",\r\n      \"code\": \"CCLIM\",\r\n      \"pricingMethod\": {\r\n        \"method\": \"Standard\"\r\n      },\r\n      \"description\": \"Test CCLIM\",\r\n      \"variantDescription\": \"Test CCLIM\",\r\n      \"labour\": {\r\n        \"pricing\": {\r\n          \"priceLevels\": [\r\n            {\r\n              \"code\": \"nsclbr\",\r\n              \"amount\": 80\r\n            }\r\n          ],\r\n      \"priceLevelCode\": \"nsclbr\",\r\n          \"taxes\": [\r\n            \"TAX\"\r\n          ],\r\n          \"totals\": {\r\n            \"extendedPrice\": 160,\r\n            \"adjustment\": 0,\r\n            \"totalExTax\": 160,\r\n            \"taxes\": [\r\n              {\r\n                \"code\": \"TAX\",\r\n                \"amount\": 16\r\n              }\r\n            ],\r\n            \"total\": 176\r\n          }\r\n        },\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 2\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"T1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"1231231231\"\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"403994\",\r\n          \"code\": \"AF12-FR\",\r\n          \"description\": \"Huile de boite automatique ( ATF WS )\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\",\r\n          \"pricing\": {\r\n            \"priceLevels\": [\r\n              {\r\n                \"code\": \"nsclbr\",\r\n                \"amount\": 20\r\n              }\r\n            ],\r\n      \"priceLevelCode\": \"nsclbr\",\r\n            \"taxes\": [\r\n              \"TAX\"\r\n            ],\r\n            \"totals\": {\r\n              \"extendedPrice\": 20,\r\n              \"adjustment\": 0,\r\n              \"totalExTax\": 20,\r\n              \"taxes\": [\r\n                {\r\n                  \"code\": \"TAX\",\r\n                  \"amount\": 2\r\n                }\r\n              ],\r\n              \"total\": 22\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"references\": {\r\n        \"modelId\": \"34429\",\r\n        \"familyCode\": \"KGB10L\",\r\n        \"isCustomOperation\": \"true\",\r\n        \"operationCodeId\": \"74505062\"\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #8 - Retrieve technically priced quote (Custom Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feab56a5-14dc-4558-8901-57f88fab1004",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the quote ",
											"pm.test(\"test total price of technically priced quote created through Order API\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"   //the total technical price is not consistent with the quote created in Menus because there is a known discount issue when create quote through order API",
											"    pm.expect(jsonData.totals.total).to.eql(198);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{toyoTechnicalCustomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{toyoTechnicalCustomID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #9 - Create commercially priced quote (Custom Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6492b41d-b9cb-4746-9d19-93d0398642b4",
										"type": "text/javascript",
										"exec": [
											"//Create commercailly priced quote (PricingMethod: Fiexed price + amount + taxes)",
											"",
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Quote ID has been created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"//put the returning quote ID into environment variable",
											"let jsonData = pm.response.json();",
											"let toyoCommercialCustomID = jsonData.id;",
											"",
											"",
											"pm.environment.set(\"toyoCommercialCustomID\", toyoCommercialCustomID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"Quotation\",\r\n  \"customer\": {\r\n    \"id\": \"5ae6a4ebe4b083ef7f3e5dc9\",\r\n    \"taxSetting\": {}\r\n  },\r\n  \"vehicles\": [\r\n    {\r\n      \"id\": \"5ae6a4dbe4b083ef7f3e5dc2\",\r\n      \"description\": \"Aygo LEDIN 5DR Hatchback 1.0L 3 Cyl 5sp Manual\",\r\n      \"vin\": \"JTDKG12C50N691739\",\r\n      \"registration\": \"8KFX35\",\r\n      \"transmissionCode\": \"5F\",\r\n      \"engineCode\": \"1KRFE\",\r\n      \"bodyType\": \"5DR\",\r\n      \"paintCode\": \"068\",\r\n      \"modelCode\": \"KGB10L - AHMRKW\"\r\n    }\r\n  ],\r\n  \"currency\": \"AUD\",\r\n  \"operations\": [\r\n    {\r\n      \"id\": \"5a7b8fd4e4b053bf92417fe7\",\r\n      \"code\": \"CCLIM\",\r\n      \"pricingMethod\": {\r\n        \"method\": \"Fixed\",\r\n        \"amountIncludingTax\": 100,\r\n    \"taxes\": [\r\n    \"TAX\"\r\n      ]\r\n      },\r\n      \"description\": \"Test CCLIM\",\r\n      \"variantDescription\": \"Test CCLIM\",\r\n      \"labour\": {\r\n        \"times\": [\r\n          {\r\n            \"code\": \"standardTime\",\r\n            \"quantity\": 2\r\n          }\r\n        ],\r\n        \"timeCode\": \"standardTime\",\r\n        \"difficultyCode\": \"T1\"\r\n      },\r\n      \"warrantyCodes\": [\r\n        {\r\n          \"code\": \"1231231231\"\r\n        }\r\n      ],\r\n      \"sundries\": [\r\n        {\r\n          \"id\": \"403994\",\r\n          \"code\": \"AF12-FR\",\r\n          \"description\": \"Huile de boite automatique ( ATF WS )\",\r\n          \"quantity\": 1,\r\n          \"quantityUnitOfMeasure\": \"Litre\"\r\n        }\r\n      ],\r\n      \"references\": {\r\n        \"modelId\": \"34429\",\r\n        \"familyCode\": \"KGB10L\",\r\n        \"isCustomOperation\": \"true\",\r\n        \"operationCodeId\": \"74505062\",\r\n        \"OECommercialExists\": \"true\",\r\n        \"ALTERNATECommercialExists\": \"true\"\r\n      }\r\n    }\r\n  ],\r\n  \"taxLevels\": [\r\n    {\r\n      \"code\": \"TAX\",\r\n      \"percentage\": 10\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/orderapi/save",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order #9 - Retrieve commercially priced quote (Custom Op)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a11b3b3-02a2-4bcf-836b-6a1f5423a791",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test  total price of the commercially priced quote through Order API",
											"pm.test(\"test total price of created technically priced quote\", function () {",
											"    var jsonData = pm.response.json();",
											"   //pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.totals.total).to.eql(100);",
											"    pm.expect(jsonData.operations[0].pricingMethod.amountIncludingTax).to.eql(100);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-IFM-UID",
										"value": "qa_tme_production_3a@ifm.com",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/orderapi/get?id={{toyoCommercialCustomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"orderapi",
										"get"
									],
									"query": [
										{
											"key": "id",
											"value": "{{toyoCommercialCustomID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c94333fa-281d-457c-a547-7342418bd917",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1d68fac-5be5-4c34-8082-eb0f80b1b52c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Toyota OSB API",
					"item": [
						{
							"name": "Authorise Toyota OSB user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ddc83fe-f8b3-4381-9d81-f6aba460aff0",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Access Token has been generated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");",
											"});",
											"//set Toyota account access token as environment variable",
											"let jsonData = pm.response.json();",
											"let TOYO_token = jsonData.accessToken;",
											"",
											"",
											"pm.environment.set(\"TOYO_token\", TOYO_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/auth/login?username={{TOYO_username}}&password={{TOYO_password}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{TOYO_username}}"
										},
										{
											"key": "password",
											"value": "{{TOYO_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a81eef22-3a0d-4295-a092-4c8656ef547d",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that 1st operation in section returns correctly\", function () {",
											"pm.expect(jsonData._embedded.operations[0].description).to.eql(\"450251: Tie Rod End Subassembly (One Side), Repair/Replace\");",
											"});",
											"",
											"pm.test(\"Test that 2nd operation in section returns correctly\", function () {",
											"pm.expect(jsonData._embedded.operations[1].description).to.eql(\"451201: Steering Rack Boot (one side), Repair/Replace\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/classes/112748/sections/85/operations/search?ifmVehicleIds=15246&countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"classes",
										"112748",
										"sections",
										"85",
										"operations",
										"search"
									],
									"query": [
										{
											"key": "ifmVehicleIds",
											"value": "15246"
										},
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / search / VIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cec4fdf0-8202-485b-b0be-35cd7198136d",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test that 1st operation in section returns correctly\", function () {",
											"pm.expect(jsonData._embedded.operations[0].description).to.eql(\"450251: Tie Rod End Subassembly (One Side), Repair/Replace\");",
											"});",
											"",
											"pm.test(\"Test that 2nd operation in section returns correctly\", function () {",
											"pm.expect(jsonData._embedded.operations[1].description).to.eql(\"451201: Steering Rack Boot (one side), Repair/Replace\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/classes/112748/sections/85/operations/search/vin/SB164EEB10E006268?countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"classes",
										"112748",
										"sections",
										"85",
										"operations",
										"search",
										"vin",
										"SB164EEB10E006268"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / operationId / search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de9667d5-79e8-43e5-98c0-bdc98a0e0512",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test that vehicle returns correctly",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test that correct operation is returned\", function () {",
											"    pm.expect(jsonData.operationCode).to.eql(\"0C4D33Y02\");",
											"});",
											"",
											"pm.test(\"Test that correct price is returned\", function () {",
											"    pm.expect(jsonData._embedded.variants[0].price.incVat).to.eql(389.99);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/classes/2844/sections/21/operations/407067/search?ifmVehicleIds=60526&countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"classes",
										"2844",
										"sections",
										"21",
										"operations",
										"407067",
										"search"
									],
									"query": [
										{
											"key": "ifmVehicleIds",
											"value": "60526"
										},
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / operationId / search / VIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a356cc1e-1d34-408f-85bc-ad6fd496334c",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test that vehicle returns correctly",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test that correct operation is returned\", function () {",
											"    pm.expect(jsonData.operationCode).to.eql(\"0C4D33Y02\");",
											"});",
											"",
											"pm.test(\"Test that correct price is returned\", function () {",
											"    pm.expect(jsonData._embedded.variants[0].price.incVat).to.eql(389.99);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/classes/2844/sections/21/operations/407067/search/vin/YARXUAHZ8DZ030578?countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"classes",
										"2844",
										"sections",
										"21",
										"operations",
										"407067",
										"search",
										"vin",
										"YARXUAHZ8DZ030578"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / operationCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd4c50af-b119-4865-8cfc-96f3ff8a1068",
										"exec": [
											"// test total price of operation",
											"pm.test(\"test total technical price of operation 0C4A93\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.operationId).to.eql(\"36563466\");",
											"    pm.expect(jsonData._embedded.variants[0].price.incVat).to.eql(129.99);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/operations/0C4A93?ifmVehicleIds=48175&countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"operations",
										"0C4A93"
									],
									"query": [
										{
											"key": "ifmVehicleIds",
											"value": "48175"
										},
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > operations / operationCode / VIN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1dcfdf6c-ea37-417f-a43d-d2f03e5fce90",
										"exec": [
											"Authorization = pm.environment.get(\"TOYO_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7fed06b0-0441-4fc3-a15f-0c4b690c5491",
										"exec": [
											"// test total price of operation",
											"pm.test(\"test total technical price of operation 0C4A93\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.operationId).to.eql(\"36555255\");",
											"    pm.expect(jsonData._embedded.variants[0].price.incVat).to.eql(100);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/operations/0C4A93/vin/JTDKG12C50N691739?countryCode=FR&languageCode=EN&externalSystemCode=osb&externalSystemId=IFMAQA&minMaxPricedOnly=true&embed=variants&exclude=variants.invoiceLines%2Cvariants.partLines%2Cvariants.sundryLines",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"operations",
										"0C4A93",
										"vin",
										"JTDKG12C50N691739"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										},
										{
											"key": "externalSystemCode",
											"value": "osb"
										},
										{
											"key": "externalSystemId",
											"value": "IFMAQA"
										},
										{
											"key": "minMaxPricedOnly",
											"value": "true"
										},
										{
											"key": "embed",
											"value": "variants"
										},
										{
											"key": "exclude",
											"value": "variants.invoiceLines%2Cvariants.partLines%2Cvariants.sundryLines"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > vehicles / search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "278bd0c0-3750-4773-b514-36593d81f68b",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"// test that vehicle returns correctly",
											"",
											"pm.test(\"Test that vehicle description for 1st vehicle code returns correctly\", function () {",
											"    pm.expect(jsonData._embedded.vehicles[0].description).to.eql(\"C-HR ACTIVE 5 Door Hatchback 2.0L CVT\");",
											"});",
											"",
											"pm.test(\"Test that modelID for 1st vehicle code returns correctly\", function () {",
											"    pm.expect(jsonData._embedded.vehicles[0].vehicleId).to.eql(\"63390\");",
											"});",
											"",
											"pm.test(\"Test that vehicle description for 2nd vehicle code returns correctly\", function () {",
											"    pm.expect(jsonData._embedded.vehicles[1].description).to.eql(\"C-HR ACTIVE Hybrid 5 Door Hatchback 1.8L CVT\");",
											"});",
											"",
											"pm.test(\"Test that modelID for 2nd vehicle code returns correctly\", function () {",
											"    pm.expect(jsonData._embedded.vehicles[1].vehicleId).to.eql(\"60155\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/vehicles/search?ifmFamilyCode=ZGX10L%2C%20ZYX10L&ifmModelCode=AHXNPX%2C%20AHXNBW&countryCode=FR&languageCode=EN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"vehicles",
										"search"
									],
									"query": [
										{
											"key": "ifmFamilyCode",
											"value": "ZGX10L%2C%20ZYX10L"
										},
										{
											"key": "ifmModelCode",
											"value": "AHXNPX%2C%20AHXNBW"
										},
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > vehicles / search / VIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43166405-67ec-46f3-8ba7-a4c10fb61905",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"// test that vehicle returns correctly",
											"",
											"pm.test(\"Test that vehicle details return correctly for JTNMC11010J001046\", function () {",
											"",
											"    pm.expect(jsonData._embedded.vehicles[0].description).to.eql(\"IQ N 3DR Hatchback 1.4L 4 Cyl Diesel 6sp Manual\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/vehicles/search/vin/JTNMC11010J001046?countryCode=FR&languageCode=EN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"vehicles",
										"search",
										"vin",
										"JTNMC11010J001046"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OSB > vehicles / vehicleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "861d5f50-5a29-4301-8983-8a518d01a4c0",
										"exec": [
											"pm.test(\"Status code is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// test that vehicle returns correctly",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test that vehicle description returns correctly for ModelID 60526\", function () {",
											"pm.expect(jsonData.description).to.eql(\"Proace G9 LWB Panel Van 2.0L 4 Cyl Turbo Diesel 6sp Manual\");",
											"});",
											"",
											"pm.test(\"Test that engine code returns correctly for ModelID 60526\", function () {",
											"    pm.expect(jsonData.engineCode).to.eql(\"4WZFTV\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/osb/vehicles/60526?countryCode=FR&languageCode=EN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"osb",
										"vehicles",
										"60526"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "languageCode",
											"value": "EN"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2549ba99-9cdc-4adc-b80a-63112a61958f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0be3deec-0e0d-418f-bff2-3e233ceb0f58",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "This is to test collection of API requests for Toyota account on Sandbox\n",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f812100e-e284-49b3-a542-80a951e4f487",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f172cd6-7265-49f3-939f-a2905043c0c5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Multi-Site",
			"item": [
				{
					"name": "Case 1",
					"item": [
						{
							"name": "Auth and Datapak",
							"item": [
								{
									"name": "Authorise Subscriber User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb85fec5-4d27-46cd-9f88-c70398b8af28",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Access Token has been generated\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"accessToken\");",
													"});",
													"",
													"//set Nissan account access token as environment variable",
													"let jsonData = pm.response.json();",
													"let multiSub_token = jsonData.accessToken;",
													"",
													"",
													"pm.environment.set(\"multiSub_token\", multiSub_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{multiSub_username}}&password={{multiSub_password}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{multiSub_username}}"
												},
												{
													"key": "password",
													"value": "{{multiSub_password}}"
												}
											]
										},
										"description": "Authorise the subscriber user. Site will be handled in the Datapak API requiest via subscriptionAssignmentId. "
									},
									"response": []
								},
								{
									"name": "Site A - Preferred Site (LP)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a45cce38-168e-46aa-b632-e154586df101",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value={{multiSub_siteA_companyId}}",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "{{multiSub_siteA_companyId}}"
												}
											]
										},
										"description": "This request sets the correct site. "
									},
									"response": []
								},
								{
									"name": "Site A - Preferred Site (SSMv2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fa302ee-9a28-46a8-9ff9-d1667f994257",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{urlProdApp}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value={{multiSub_siteA_companyId}}",
											"host": [
												"{{urlProdApp}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "{{multiSub_siteA_companyId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Site A - Check technical price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4388f95-a44e-4d2c-bd2c-2d3fac40b230",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test total technical price of operation 56856 / REXM\", function () {",
													"    ",
													"    //pm.expect(jsonData.isoCurrencyCode).to.eql(\"EUR\");",
													"    //pm.expect(jsonData.operations[0].totals.total).to.eql(198.38);",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(719.86);",
													"    //check discount for labour rate",
													"    //pm.expect(jsonData.operations[0].labour.pricing.adjustmentPercentage).to.eql(7);",
													"    //check labour time adjustment, standardTime 0.7",
													"    pm.expect(jsonData.operations[0].labour.times[0].code).to.eql(\"standardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[0].quantity).to.eql(0.7);",
													"});",
													"",
													"//check tax rates for labour, parts pricing and sundries",
													"pm.test(\"Test tax rate for labour, parts and sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.taxes[0]).to.eql(\"TAX\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.taxes[0]).to.eql(\"TAX\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.taxes[0]).to.eql(\"TAX\");",
													"    ",
													"});",
													"",
													"//Check labour, sundries rate and parts pricing",
													"pm.test(\"Test amounts for labour, parts and sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].code).to.eql(\"Subscriber SB LR\");",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].amount).to.eql(111);",
													"    ",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].code).to.eql(\"RTL\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].amount).to.eql(433.55);",
													"    ",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].code).to.eql(\"Subscriber SB LR\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].amount).to.eql(20);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=Technical&showSubstitutionDetails=no&market=BE&subscriptionAssignment=DYN00000000054C793&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000054C793"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (technical price) for the subscriber user accessing Site A."
									},
									"response": []
								},
								{
									"name": "Site A - Check commercial price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39c935ad-9fc9-4646-86c2-db0e3e10bf2e",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"// check Author price rounding rule",
													"pm.test(\"Test that the price rounding rule is applying correctly\", function () {",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(720);",
													"    //check total exclude tax price",
													"    pm.expect(jsonData.operations[0].totals.totalExTax).to.eql(595.04);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=OE&showSubstitutionDetails=no&market=BE&subscriptionAssignment={{multiSub_siteA_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "OE"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{multiSub_siteA_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (commercial price) for the subscriber user accessing Site A."
									},
									"response": []
								},
								{
									"name": "Site B - Preferred Site (LP)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34c614bf-5d8a-496f-8fd5-34a05c2c2ddc",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value={{multiSub_siteB_companyId}}",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "{{multiSub_siteB_companyId}}"
												}
											]
										},
										"description": "This request sets the correct site. "
									},
									"response": []
								},
								{
									"name": "Site B - Preferred Site (SSMv2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5da39801-9e87-45bc-bd5d-6e50b8e41de4",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{urlProdApp}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value={{multiSub_siteB_companyId}}",
											"host": [
												"{{urlProdApp}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "{{multiSub_siteB_companyId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Site B - Check technical price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b848c4e-28aa-4bec-9ca9-dd63409f39ab",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"test total technical price of operation 56856 / REXM\", function () {",
													"    ",
													"    //pm.expect(jsonData.isoCurrencyCode).to.eql(\"EUR\");",
													"    //pm.expect(jsonData.operations[0].totals.total).to.eql(198.38);",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(819.15);",
													"    //check discount for labour rate",
													"    //pm.expect(jsonData.operations[0].labour.pricing.adjustmentPercentage).to.eql(7);",
													"    //check labour time adjustment, standardTime 0.7",
													"    pm.expect(jsonData.operations[0].labour.times[0].code).to.eql(\"standardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[0].quantity).to.eql(0.7);",
													"});",
													"",
													"//check tax rates for labour, parts pricing and sundries",
													"pm.test(\"Test tax rate for labour, partss sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.taxes[0]).to.eql(\"T20\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.taxes[0]).to.eql(\"T20\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.taxes[0]).to.eql(\"T20\");",
													"    ",
													"});",
													"",
													"//Check labour, sundries rate and parts pricing",
													"pm.test(\"Test labour, parts and sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].code).to.eql(\"Holder SB LR\");",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].amount).to.eql(222);",
													"    ",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].code).to.eql(\"RTL\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].amount).to.eql(433.55);",
													"    ",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].code).to.eql(\"Holder SB LR\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].amount).to.eql(30);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=Technical&showSubstitutionDetails=no&market=BE&subscriptionAssignment=DYN00000000054C9AE&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000054C9AE"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (technical price) for the subscriber user accessing Site B."
									},
									"response": []
								},
								{
									"name": "Site B - Check commercial price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fa71de6-32d1-4200-86e7-ae657e6156ee",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"// check Author price rounding rule",
													"pm.test(\"Test that the price rounding rule is applying correctly\", function () {",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(820);",
													"    //check total exclude tax price",
													"    pm.expect(jsonData.operations[0].totals.totalExTax).to.eql(683.33);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=OE&showSubstitutionDetails=no&market=BE&subscriptionAssignment={{multiSub_siteB_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "OE"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{multiSub_siteB_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (commercial price) for the subscriber user accessing Site B."
									},
									"response": []
								},
								{
									"name": "Authorise Holder user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8771b98b-3b80-4e51-b7fb-961fc58fa17a",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Access Token has been generated\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"accessToken\");",
													"});",
													"",
													"//set Nissan account access token as environment variable",
													"let jsonData = pm.response.json();",
													"let multiHol_token = jsonData.accessToken;",
													"",
													"",
													"pm.environment.set(\"multiHol_token\", multiHol_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{multiHol_username}}&password={{multiHol_password}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{multiHol_username}}"
												},
												{
													"key": "password",
													"value": "{{multiHol_password}}"
												}
											]
										},
										"description": "Authorise the subscription holder user. Site will be handled in the Datapak API requiest via subscriptionAssignmentId. "
									},
									"response": []
								},
								{
									"name": "Site B - Check technical price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e89b7da2-e319-4588-945c-8b20b4903291",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"test total technical price of operation 56856 / REXM\", function () {",
													"    ",
													"    //pm.expect(jsonData.isoCurrencyCode).to.eql(\"EUR\");",
													"    //pm.expect(jsonData.operations[0].totals.total).to.eql(198.38);",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(819.15);",
													"    //check discount for labour rate",
													"    //pm.expect(jsonData.operations[0].labour.pricing.adjustmentPercentage).to.eql(7);",
													"    //check labour time adjustment, standardTime 0.7",
													"    pm.expect(jsonData.operations[0].labour.times[0].code).to.eql(\"standardTime\");",
													"    pm.expect(jsonData.operations[0].labour.times[0].quantity).to.eql(0.7);",
													"});",
													"",
													"//check tax rates for labour, parts pricing and sundries",
													"pm.test(\"Test tax rate for labour, partss sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.taxes[0]).to.eql(\"T20\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.taxes[0]).to.eql(\"T20\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.taxes[0]).to.eql(\"T20\");",
													"    ",
													"});",
													"",
													"//Check labour, sundries rate and parts pricing",
													"pm.test(\"Test labour, parts and sundries\", function () {",
													"    ",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].code).to.eql(\"Holder SB LR\");",
													"    pm.expect(jsonData.operations[0].labour.pricing.priceLevels[0].amount).to.eql(222);",
													"    ",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].code).to.eql(\"RTL\");",
													"    pm.expect(jsonData.operations[0].parts[0].pricing.priceLevels[0].amount).to.eql(433.55);",
													"    ",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].code).to.eql(\"Holder SB LR\");",
													"    pm.expect(jsonData.operations[0].sundries[0].pricing.priceLevels[0].amount).to.eql(30);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=Technical&showSubstitutionDetails=no&market=BE&subscriptionAssignment={{multiHol_siteB_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{multiHol_siteB_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (technical price) for the subscription holder user accessing Site B."
									},
									"response": []
								},
								{
									"name": "Site B - Check commercial price",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cddbd67-9976-49f6-a462-5cd9e2cc3bcb",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"// check Author price rounding rule",
													"pm.test(\"Test that the price rounding rule is applying correctly\", function () {",
													"    //check pricing method",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Fixed\");",
													"    //check total technical price",
													"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(820);",
													"    //check total exclude tax price",
													"    pm.expect(jsonData.operations[0].totals.totalExTax).to.eql(683.33);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=REXM&modelId=56856&pricingMode=OE&showSubstitutionDetails=no&market=BE&subscriptionAssignment={{multiHol_siteB_subscriptionAssignment}}&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REXM"
												},
												{
													"key": "modelId",
													"value": "56856"
												},
												{
													"key": "pricingMode",
													"value": "OE"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "BE"
												},
												{
													"key": "subscriptionAssignment",
													"value": "{{multiHol_siteB_subscriptionAssignment}}"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										},
										"description": "Check Datapak API (commercial price) for the subscription holder user accessing Site B."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case 2",
					"item": [
						{
							"name": "Auth and Datapak API",
							"item": [
								{
									"name": "Auth API (Toyota)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be0b6d21-6a03-4ac7-a566-45cf5318c037",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{toyoGB_un}}&password={{toyoGB_pw}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{toyoGB_un}}"
												},
												{
													"key": "password",
													"value": "{{toyoGB_pw}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/TME - Preferred Site (LP2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cfabfb8-bf4f-410a-9591-e57c6729a4f5",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c98c9f8981608c65e8690",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c98c9f8981608c65e8690"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/TME - Preferred Site (SSMv2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e837636-7332-436c-b142-e4ee7bce26ef",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlProdApp}}/ver/sb-menus-api-2-40-2-a/home/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c98c9f8981608c65e8690",
											"host": [
												"{{urlProdApp}}"
											],
											"path": [
												"ver",
												"sb-menus-api-2-40-2-a",
												"home",
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c98c9f8981608c65e8690"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/TME - Datapak /get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d48efa87-e9e0-4327-a96b-19bf74fb59a1",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 48441 / 0C4C53\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(108);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(11.66);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(114);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(280.39);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/get?modelId=48441&id=32042398&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=VNKKD3D320A186824&pricingMode=Technical&market=GB&subscriptionAssignment=DYN000000000641027&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "48441"
												},
												{
													"key": "id",
													"value": "32042398"
												},
												{
													"key": "operationSource",
													"value": "Manufacturer"
												},
												{
													"key": "applyBundle",
													"value": "yes"
												},
												{
													"key": "applySubstitutions",
													"value": "yes"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "vin",
													"value": "VNKKD3D320A186824"
												},
												{
													"key": "pricingMode",
													"value": "Technical"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN000000000641027"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/TME - Datapak /getByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e88a9fa3-9e15-4338-83dd-1cbbf06931ec",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 48441 / 0C4C53\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(108);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(11.66);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(114);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(280.39);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=0C4C53&modelId=48441&vin=VNKKD3D320A186824&pricingMode=Auto&showSubstitutionDetails=no&market=GB&subscriptionAssignment=DYN000000000641027&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "0C4C53"
												},
												{
													"key": "modelId",
													"value": "48441"
												},
												{
													"key": "vin",
													"value": "VNKKD3D320A186824"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN000000000641027"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/Nissan - Preferred Site (LP2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6664b095-e838-4ca3-8318-0c64258ed0b4",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c9148f8981608c65e852f",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c9148f8981608c65e852f"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/Nissan - Datapak /get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff445037-379e-4d5d-90b5-f53bb71455c6",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 56677 / S60KMNE\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(225);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(53.99);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(20);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(358.79);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/get?modelId=56677&id=10147066&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=SJNFAAJ11U1000347&pricingMode=Auto&market=GB&subscriptionAssignment=DYN00000000064102D&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "56677"
												},
												{
													"key": "id",
													"value": "10147066"
												},
												{
													"key": "operationSource",
													"value": "Manufacturer"
												},
												{
													"key": "applyBundle",
													"value": "yes"
												},
												{
													"key": "applySubstitutions",
													"value": "yes"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "vin",
													"value": "SJNFAAJ11U1000347"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000064102D"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TME/Nissan - Datapak /getByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3710175-5899-4769-86c1-11326117789e",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 56677 / S60KMNE\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(225);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(53.99);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(20);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(358.79);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=S60KMNE&modelId=56677&vin=SJNFAAJ11U1000347&pricingMode=Auto&showSubstitutionDetails=no&market=GB&subscriptionAssignment=DYN00000000064102D&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "S60KMNE"
												},
												{
													"key": "modelId",
													"value": "56677"
												},
												{
													"key": "vin",
													"value": "SJNFAAJ11U1000347"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000064102D"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Auth API - Nissan",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "009cb3fc-f729-453f-afa9-133e80f3ee0d",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{nissGB_un}}&password={{nissGB_pw}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{nissGB_un}}"
												},
												{
													"key": "password",
													"value": "{{nissGB_pw}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/TME - Preferred Site (LP2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eac59176-f98e-4a93-b316-7f05230ec146",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c98c9f8981608c65e8690",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c98c9f8981608c65e8690"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/TME - Preferred Site (SSMv2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ab80867-3dbb-48e5-a369-05de7dfb572b",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlProdApp}}/ver/sb-menus-api-2-40-2-a/home/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c98c9f8981608c65e8690",
											"host": [
												"{{urlProdApp}}"
											],
											"path": [
												"ver",
												"sb-menus-api-2-40-2-a",
												"home",
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c98c9f8981608c65e8690"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/TME - Datapak /get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afc8130-3f98-4786-bb34-720f15d38c91",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 48441 / 0C4C53\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(108);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(11.66);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(114);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(280.39);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/get?modelId=48441&id=32042398&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&pricingMode=Auto&market=GB&subscriptionAssignment=DYN00000000064102B&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "48441"
												},
												{
													"key": "id",
													"value": "32042398"
												},
												{
													"key": "operationSource",
													"value": "Manufacturer"
												},
												{
													"key": "applyBundle",
													"value": "yes"
												},
												{
													"key": "applySubstitutions",
													"value": "yes"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000064102B"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/TME - Datapak /getByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a9e03b0-2974-4058-a165-91bc1fc614e6",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 48441 / 0C4C53\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(108);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(11.66);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(114);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(280.39);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=0C4C53&modelId=48441&vin=VNKKD3D320A186824&pricingMode=Auto&showSubstitutionDetails=no&market=GB&subscriptionAssignment=DYN00000000064102B&locale=en-gb\n",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "0C4C53"
												},
												{
													"key": "modelId",
													"value": "48441"
												},
												{
													"key": "vin",
													"value": "VNKKD3D320A186824"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN00000000064102B"
												},
												{
													"key": "locale",
													"value": "en-gb\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/Nissan - Preferred Site (LP2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e2ec141-2772-4aef-a29a-82322b2f24aa",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url_env}}/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c9148f8981608c65e852f",
											"host": [
												"{{url_env}}"
											],
											"path": [
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c9148f8981608c65e852f"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/Nissan - Preferred Site (SSMv2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14f0bdb4-dcbb-4b01-acee-9e27cb65562d",
												"exec": [
													"//set companyId as the preferred ID for this user",
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Set a 5 second delay to negate Sandbox replication lag when changing sites in LP",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlProdApp}}/ver/sb-menus-api-2-40-2-a/home/landingpage/services/preferences/savepreference.json?key=preferredCompanyId&value=5c7c9148f8981608c65e852f",
											"host": [
												"{{urlProdApp}}"
											],
											"path": [
												"ver",
												"sb-menus-api-2-40-2-a",
												"home",
												"landingpage",
												"services",
												"preferences",
												"savepreference.json"
											],
											"query": [
												{
													"key": "key",
													"value": "preferredCompanyId"
												},
												{
													"key": "value",
													"value": "5c7c9148f8981608c65e852f"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/Nissan - Datapak /get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f4f121a-7f9c-4e0b-a268-8701cf32dd63",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 56857 / RBDFP\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(150);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(146.27);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(10);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(367.53);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/get?modelId=56857&id=35604770&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=JN1GAAZ34U0300500&pricingMode=Auto&market=GB&subscriptionAssignment=DYN000000000641013&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"get"
											],
											"query": [
												{
													"key": "modelId",
													"value": "56857"
												},
												{
													"key": "id",
													"value": "35604770"
												},
												{
													"key": "operationSource",
													"value": "Manufacturer"
												},
												{
													"key": "applyBundle",
													"value": "yes"
												},
												{
													"key": "applySubstitutions",
													"value": "yes"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "vin",
													"value": "JN1GAAZ34U0300500"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN000000000641013"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nissan/Nissan - Datapak /getByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44777707-7a5d-4f00-8185-39008cfef768",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"// test total price of operation",
													"pm.test(\"Test totals of operation 56857 / RBDFP\", function () {",
													"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(150);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(146.27);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(10);",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(367.53);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=RBDFP&modelId=56857&vin=JN1GAAZ34U0300500&pricingMode=Auto&showSubstitutionDetails=no&market=GB&subscriptionAssignment=DYN000000000641013&locale=en-gb",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"datapak",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "RBDFP"
												},
												{
													"key": "modelId",
													"value": "56857"
												},
												{
													"key": "vin",
													"value": "JN1GAAZ34U0300500"
												},
												{
													"key": "pricingMode",
													"value": "Auto"
												},
												{
													"key": "showSubstitutionDetails",
													"value": "no"
												},
												{
													"key": "market",
													"value": "GB"
												},
												{
													"key": "subscriptionAssignment",
													"value": "DYN000000000641013"
												},
												{
													"key": "locale",
													"value": "en-gb"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Toyota OSB API",
							"item": [
								{
									"name": "Auth API  - Toyota",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97f486d6-6801-4261-99e3-fb4336828023",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{toyoGB_un}}&password={{toyoGB_pw}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{toyoGB_un}}"
												},
												{
													"key": "password",
													"value": "{{toyoGB_pw}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OSB API - Toyota /operationCode/VIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2565a5cb-ce7d-4e5c-a790-52b152953de7",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"test total technical price of operation 0C4A93\", function () {",
													"    pm.expect(jsonData.operationCode).to.eql(\"170151\");",
													"    pm.expect(jsonData._embedded.variants[0].price.incVat).to.eql(207.01);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/osb/operations/170151/vin/JTDKG12C50N691739?countryCode=GB&languageCode=EN&externalSystemCode=A2D&externalSystemId=IFMSSMAQA&minMaxPricedOnly=true&embed=variants",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"osb",
												"operations",
												"170151",
												"vin",
												"JTDKG12C50N691739"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "GB"
												},
												{
													"key": "languageCode",
													"value": "EN"
												},
												{
													"key": "externalSystemCode",
													"value": "A2D"
												},
												{
													"key": "externalSystemId",
													"value": "IFMSSMAQA"
												},
												{
													"key": "minMaxPricedOnly",
													"value": "true"
												},
												{
													"key": "embed",
													"value": "variants"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Nissan OSB API",
							"item": [
								{
									"name": "Auth API - Nissan",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22b7902b-e5b2-44c9-ab1c-b765f93f2f3d",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/auth/login?username={{nissGB_un}}&password={{nissGB_pw}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{nissGB_un}}"
												},
												{
													"key": "password",
													"value": "{{nissGB_pw}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OSB API - Nissan /getByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1eddd09-f161-45e9-8d6f-4643ea82064b",
												"exec": [
													"pm.test(\"Status code is 200\", function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Test total price for this operation\", function () {",
													"    pm.expect(jsonData.operations[0].totals.totalExTax).to.eql(461.18);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(285);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(92.18);",
													"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(84);",
													"});",
													"",
													"pm.test(\"Test tax amount is correct\", function () {",
													"    pm.expect(jsonData.operations[0].totals.total).to.eql(553.42);",
													"    pm.expect(jsonData.operations[0].totals.taxes[0].code).to.eql(\"TVA\");",
													"    pm.expect(jsonData.operations[0].totals.taxes[0].amount).to.eql(92.24);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/v1/nissan-osb/operation/getByCode?operationCode=REM&modelId=62315&term=SJNFBNJ11U1146667&type=vin&countryCode=GB&externalSystemCode=OSB&externalSystemId=IFMSSMAQA",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"nissan-osb",
												"operation",
												"getByCode"
											],
											"query": [
												{
													"key": "operationCode",
													"value": "REM"
												},
												{
													"key": "modelId",
													"value": "62315"
												},
												{
													"key": "term",
													"value": "SJNFBNJ11U1146667"
												},
												{
													"key": "type",
													"value": "vin"
												},
												{
													"key": "countryCode",
													"value": "GB"
												},
												{
													"key": "externalSystemCode",
													"value": "OSB"
												},
												{
													"key": "externalSystemId",
													"value": "IFMSSMAQA"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Test for multi-site account functionality. "
		},
		{
			"name": "Multi-Franchise",
			"item": [
				{
					"name": "Authorise multi-franchise user",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/auth/login?username={{multifranchise_un}}&password={{multifranchise_pw}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{multifranchise_un}}"
								},
								{
									"key": "password",
									"value": "{{multifranchise_pw}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multifranchise - Toyo - Datapak /get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e0e2e05-934a-4be7-a223-9f18cb0c60e9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"// test total price of operation",
									"pm.test(\"Confirm correct operation returns\", function () {",
									"    pm.expect(jsonData.operations[0].code).to.eql(\"0C4C53\");",
									"    pm.expect(jsonData.operations[0].description).to.eql(\"0C4C53: Carry out 45,000km service as per handbook.\");",
									"});  ",
									"",
									"pm.test(\"Confirm correct total\", function () {",
									"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
									"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(200.83);",
									"});",
									"",
									"pm.test(\"Confirm correct subtotals\", function () {",
									"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(36);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(20.76);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(142);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/datapak/operation/get?modelId=34429&id=22303414&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=JTDKG12C50N691739&pricingMode=Technical&market=CH&subscriptionAssignment=DYN000000000644E19&locale=en-gb\n",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"datapak",
								"operation",
								"get"
							],
							"query": [
								{
									"key": "modelId",
									"value": "34429"
								},
								{
									"key": "id",
									"value": "22303414"
								},
								{
									"key": "operationSource",
									"value": "Manufacturer"
								},
								{
									"key": "applyBundle",
									"value": "yes"
								},
								{
									"key": "applySubstitutions",
									"value": "yes"
								},
								{
									"key": "showSubstitutionDetails",
									"value": "no"
								},
								{
									"key": "vin",
									"value": "JTDKG12C50N691739"
								},
								{
									"key": "pricingMode",
									"value": "Technical"
								},
								{
									"key": "market",
									"value": "CH"
								},
								{
									"key": "subscriptionAssignment",
									"value": "DYN000000000644E19"
								},
								{
									"key": "locale",
									"value": "en-gb\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multifranchise - Toyo - Datapak /getByCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa07413b-f3a7-4fc4-9628-cad02d939390",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"// test total price of operation",
									"pm.test(\"Confirm correct operation returns\", function () {",
									"    pm.expect(jsonData.operations[0].code).to.eql(\"0C4C53\");",
									"    pm.expect(jsonData.operations[0].description).to.eql(\"0C4C53: Carry out 45,000km service as per handbook.\");",
									"});  ",
									"",
									"pm.test(\"Confirm correct total\", function () {",
									"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
									"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(200.83);",
									"});",
									"",
									"pm.test(\"Confirm correct subtotals\", function () {",
									"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(36);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(20.76);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(142);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=0C4C53&modelId=34429&vin=JTDKG12C50N691739&pricingMode=Technical&showSubstitutionDetails=no&market=CH&subscriptionAssignment=DYN000000000644E19&locale=en-gb\n",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"datapak",
								"operation",
								"getByCode"
							],
							"query": [
								{
									"key": "operationCode",
									"value": "0C4C53"
								},
								{
									"key": "modelId",
									"value": "34429"
								},
								{
									"key": "vin",
									"value": "JTDKG12C50N691739"
								},
								{
									"key": "pricingMode",
									"value": "Technical"
								},
								{
									"key": "showSubstitutionDetails",
									"value": "no"
								},
								{
									"key": "market",
									"value": "CH"
								},
								{
									"key": "subscriptionAssignment",
									"value": "DYN000000000644E19"
								},
								{
									"key": "locale",
									"value": "en-gb\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multifranchise - Nissan - Datapak /get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "594cc949-965b-470a-9618-f5051c2d8873",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"// test total price of operation",
									"pm.test(\"Confirm correct operation returns\", function () {",
									"    pm.expect(jsonData.operations[0].code).to.eql(\"RCM\");",
									"    pm.expect(jsonData.operations[0].description).to.eql(\"RCM: Replace centre muffler.\");",
									"});  ",
									"",
									"pm.test(\"Confirm correct total\", function () {",
									"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
									"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(1319.65);",
									"});",
									"",
									"pm.test(\"Confirm correct subtotals\", function () {",
									"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(160);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(1036.05);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(20);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/datapak/operation/get?modelId=57385&id=37610896&operationSource=Manufacturer&applyBundle=yes&applySubstitutions=yes&showSubstitutionDetails=no&vin=JN1GANR35U0120407&pricingMode=Technical&market=CH&subscriptionAssignment=DYN000000000644E14&locale=en-gb",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"datapak",
								"operation",
								"get"
							],
							"query": [
								{
									"key": "modelId",
									"value": "57385"
								},
								{
									"key": "id",
									"value": "37610896"
								},
								{
									"key": "operationSource",
									"value": "Manufacturer"
								},
								{
									"key": "applyBundle",
									"value": "yes"
								},
								{
									"key": "applySubstitutions",
									"value": "yes"
								},
								{
									"key": "showSubstitutionDetails",
									"value": "no"
								},
								{
									"key": "vin",
									"value": "JN1GANR35U0120407"
								},
								{
									"key": "pricingMode",
									"value": "Technical"
								},
								{
									"key": "market",
									"value": "CH"
								},
								{
									"key": "subscriptionAssignment",
									"value": "DYN000000000644E14"
								},
								{
									"key": "locale",
									"value": "en-gb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multifranchise - Nissan - Datapak /getByCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37ab61cf-1613-4b0e-867d-c019921d1439",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"// test total price of operation",
									"pm.test(\"Confirm correct operation returns\", function () {",
									"    pm.expect(jsonData.operations[0].code).to.eql(\"RCM\");",
									"    pm.expect(jsonData.operations[0].description).to.eql(\"RCM: Replace centre muffler.\");",
									"});  ",
									"",
									"pm.test(\"Confirm correct total\", function () {",
									"    pm.expect(jsonData.operations[0].pricingMethod.method).to.eql(\"Standard\");",
									"    pm.expect(jsonData.operations[0].pricingMethod.amount).to.eql(1319.65);",
									"});",
									"",
									"pm.test(\"Confirm correct subtotals\", function () {",
									"    pm.expect(jsonData.operations[0].totals.subtotals.labour).to.eql(160);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.parts).to.eql(1036.05);",
									"    pm.expect(jsonData.operations[0].totals.subtotals.sundries).to.eql(20);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/datapak/operation/getByCode?operationCode=RCM&modelId=57385&vin=JN1GANR35U0120407&pricingMode=Technical&showSubstitutionDetails=no&market=CH&subscriptionAssignment=DYN000000000644E14&locale=en-gb",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"datapak",
								"operation",
								"getByCode"
							],
							"query": [
								{
									"key": "operationCode",
									"value": "RCM"
								},
								{
									"key": "modelId",
									"value": "57385"
								},
								{
									"key": "vin",
									"value": "JN1GANR35U0120407"
								},
								{
									"key": "pricingMode",
									"value": "Technical"
								},
								{
									"key": "showSubstitutionDetails",
									"value": "no"
								},
								{
									"key": "market",
									"value": "CH"
								},
								{
									"key": "subscriptionAssignment",
									"value": "DYN000000000644E14"
								},
								{
									"key": "locale",
									"value": "en-gb"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "458e1af4-41ff-41ef-82cb-3957a514589d",
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5559e2b2-2c6e-47c8-8040-387ed8139f21",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}